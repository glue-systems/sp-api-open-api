<?php
/**
 * RemovalShipmentAdjustmentEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\FinancesV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\FinancesV0\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\FinancesV0\ObjectSerializer;

/**
 * RemovalShipmentAdjustmentEvent Class Doc Comment
 *
 * @category Class
 * @description A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered).
 * @package  Glue\SpApi\OpenAPI\Clients\FinancesV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RemovalShipmentAdjustmentEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RemovalShipmentAdjustmentEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'postedDate' => '\DateTime',
        'adjustmentEventId' => 'string',
        'merchantOrderId' => 'string',
        'orderId' => 'string',
        'transactionType' => 'string',
        'removalShipmentItemAdjustmentList' => '\Glue\SpApi\OpenAPI\Clients\FinancesV0\Model\RemovalShipmentItemAdjustment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'postedDate' => 'date-time',
        'adjustmentEventId' => null,
        'merchantOrderId' => null,
        'orderId' => null,
        'transactionType' => null,
        'removalShipmentItemAdjustmentList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'postedDate' => 'PostedDate',
        'adjustmentEventId' => 'AdjustmentEventId',
        'merchantOrderId' => 'MerchantOrderId',
        'orderId' => 'OrderId',
        'transactionType' => 'TransactionType',
        'removalShipmentItemAdjustmentList' => 'RemovalShipmentItemAdjustmentList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'postedDate' => 'setPostedDate',
        'adjustmentEventId' => 'setAdjustmentEventId',
        'merchantOrderId' => 'setMerchantOrderId',
        'orderId' => 'setOrderId',
        'transactionType' => 'setTransactionType',
        'removalShipmentItemAdjustmentList' => 'setRemovalShipmentItemAdjustmentList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'postedDate' => 'getPostedDate',
        'adjustmentEventId' => 'getAdjustmentEventId',
        'merchantOrderId' => 'getMerchantOrderId',
        'orderId' => 'getOrderId',
        'transactionType' => 'getTransactionType',
        'removalShipmentItemAdjustmentList' => 'getRemovalShipmentItemAdjustmentList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['postedDate'] = isset($data['postedDate']) ? $data['postedDate'] : null;
        $this->container['adjustmentEventId'] = isset($data['adjustmentEventId']) ? $data['adjustmentEventId'] : null;
        $this->container['merchantOrderId'] = isset($data['merchantOrderId']) ? $data['merchantOrderId'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['transactionType'] = isset($data['transactionType']) ? $data['transactionType'] : null;
        $this->container['removalShipmentItemAdjustmentList'] = isset($data['removalShipmentItemAdjustmentList']) ? $data['removalShipmentItemAdjustmentList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets postedDate
     *
     * @return \DateTime|null
     */
    public function getPostedDate()
    {
        return $this->container['postedDate'];
    }

    /**
     * Sets postedDate
     *
     * @param \DateTime|null $postedDate postedDate
     *
     * @return $this
     */
    public function setPostedDate($postedDate)
    {
        $this->container['postedDate'] = $postedDate;

        return $this;
    }

    /**
     * Gets adjustmentEventId
     *
     * @return string|null
     */
    public function getAdjustmentEventId()
    {
        return $this->container['adjustmentEventId'];
    }

    /**
     * Sets adjustmentEventId
     *
     * @param string|null $adjustmentEventId The unique identifier for the adjustment event.
     *
     * @return $this
     */
    public function setAdjustmentEventId($adjustmentEventId)
    {
        $this->container['adjustmentEventId'] = $adjustmentEventId;

        return $this;
    }

    /**
     * Gets merchantOrderId
     *
     * @return string|null
     */
    public function getMerchantOrderId()
    {
        return $this->container['merchantOrderId'];
    }

    /**
     * Sets merchantOrderId
     *
     * @param string|null $merchantOrderId The merchant removal orderId.
     *
     * @return $this
     */
    public function setMerchantOrderId($merchantOrderId)
    {
        $this->container['merchantOrderId'] = $merchantOrderId;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId The orderId for shipping inventory.
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param string|null $transactionType The type of removal order.  Possible values:  * WHOLESALE_LIQUIDATION.
     *
     * @return $this
     */
    public function setTransactionType($transactionType)
    {
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets removalShipmentItemAdjustmentList
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FinancesV0\Model\RemovalShipmentItemAdjustment[]|null
     */
    public function getRemovalShipmentItemAdjustmentList()
    {
        return $this->container['removalShipmentItemAdjustmentList'];
    }

    /**
     * Sets removalShipmentItemAdjustmentList
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FinancesV0\Model\RemovalShipmentItemAdjustment[]|null $removalShipmentItemAdjustmentList A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory.
     *
     * @return $this
     */
    public function setRemovalShipmentItemAdjustmentList($removalShipmentItemAdjustmentList)
    {
        $this->container['removalShipmentItemAdjustmentList'] = $removalShipmentItemAdjustmentList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


