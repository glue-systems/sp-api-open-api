<?php
/**
 * DetailedShippingTimeType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\ProductPricingV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\ProductPricingV0\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\ProductPricingV0\ObjectSerializer;

/**
 * DetailedShippingTimeType Class Doc Comment
 *
 * @category Class
 * @description The time range in which an item will likely be shipped once an order has been placed.
 * @package  Glue\SpApi\OpenAPI\Clients\ProductPricingV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DetailedShippingTimeType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DetailedShippingTimeType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'minimumHours' => 'int',
        'maximumHours' => 'int',
        'availableDate' => 'string',
        'availabilityType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'minimumHours' => 'int64',
        'maximumHours' => 'int64',
        'availableDate' => null,
        'availabilityType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'minimumHours' => 'minimumHours',
        'maximumHours' => 'maximumHours',
        'availableDate' => 'availableDate',
        'availabilityType' => 'availabilityType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'minimumHours' => 'setMinimumHours',
        'maximumHours' => 'setMaximumHours',
        'availableDate' => 'setAvailableDate',
        'availabilityType' => 'setAvailabilityType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'minimumHours' => 'getMinimumHours',
        'maximumHours' => 'getMaximumHours',
        'availableDate' => 'getAvailableDate',
        'availabilityType' => 'getAvailabilityType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AVAILABILITY_TYPE_NOW = 'NOW';
    const AVAILABILITY_TYPE_FUTURE_WITHOUT_DATE = 'FUTURE_WITHOUT_DATE';
    const AVAILABILITY_TYPE_FUTURE_WITH_DATE = 'FUTURE_WITH_DATE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvailabilityTypeAllowableValues()
    {
        return [
            self::AVAILABILITY_TYPE_NOW,
            self::AVAILABILITY_TYPE_FUTURE_WITHOUT_DATE,
            self::AVAILABILITY_TYPE_FUTURE_WITH_DATE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['minimumHours'] = isset($data['minimumHours']) ? $data['minimumHours'] : null;
        $this->container['maximumHours'] = isset($data['maximumHours']) ? $data['maximumHours'] : null;
        $this->container['availableDate'] = isset($data['availableDate']) ? $data['availableDate'] : null;
        $this->container['availabilityType'] = isset($data['availabilityType']) ? $data['availabilityType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAvailabilityTypeAllowableValues();
        if (!is_null($this->container['availabilityType']) && !in_array($this->container['availabilityType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'availabilityType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets minimumHours
     *
     * @return int|null
     */
    public function getMinimumHours()
    {
        return $this->container['minimumHours'];
    }

    /**
     * Sets minimumHours
     *
     * @param int|null $minimumHours The minimum time, in hours, that the item will likely be shipped after the order has been placed.
     *
     * @return $this
     */
    public function setMinimumHours($minimumHours)
    {
        $this->container['minimumHours'] = $minimumHours;

        return $this;
    }

    /**
     * Gets maximumHours
     *
     * @return int|null
     */
    public function getMaximumHours()
    {
        return $this->container['maximumHours'];
    }

    /**
     * Sets maximumHours
     *
     * @param int|null $maximumHours The maximum time, in hours, that the item will likely be shipped after the order has been placed.
     *
     * @return $this
     */
    public function setMaximumHours($maximumHours)
    {
        $this->container['maximumHours'] = $maximumHours;

        return $this;
    }

    /**
     * Gets availableDate
     *
     * @return string|null
     */
    public function getAvailableDate()
    {
        return $this->container['availableDate'];
    }

    /**
     * Sets availableDate
     *
     * @param string|null $availableDate The date when the item will be available for shipping. Only displayed for items that are not currently available for shipping.
     *
     * @return $this
     */
    public function setAvailableDate($availableDate)
    {
        $this->container['availableDate'] = $availableDate;

        return $this;
    }

    /**
     * Gets availabilityType
     *
     * @return string|null
     */
    public function getAvailabilityType()
    {
        return $this->container['availabilityType'];
    }

    /**
     * Sets availabilityType
     *
     * @param string|null $availabilityType Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
     *
     * @return $this
     */
    public function setAvailabilityType($availabilityType)
    {
        $allowedValues = $this->getAvailabilityTypeAllowableValues();
        if (!is_null($availabilityType) && !in_array($availabilityType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'availabilityType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['availabilityType'] = $availabilityType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


