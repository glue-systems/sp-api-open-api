<?php
/**
 * SellerFreightClass
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\FulfillmentInboundV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\FulfillmentInboundV0\Model;
use \Glue\SpApi\OpenAPI\Clients\FulfillmentInboundV0\ObjectSerializer;

/**
 * SellerFreightClass Class Doc Comment
 *
 * @category Class
 * @description The freight class of the shipment. For information about determining the freight class, contact the carrier.
 * @package  Glue\SpApi\OpenAPI\Clients\FulfillmentInboundV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SellerFreightClass
{
    /**
     * Possible values of this enum
     */
    const _50 = '50';
    const _55 = '55';
    const _60 = '60';
    const _65 = '65';
    const _70 = '70';
    const _775 = '77.5';
    const _85 = '85';
    const _925 = '92.5';
    const _100 = '100';
    const _110 = '110';
    const _125 = '125';
    const _150 = '150';
    const _175 = '175';
    const _200 = '200';
    const _250 = '250';
    const _300 = '300';
    const _400 = '400';
    const _500 = '500';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        $modelGeneratedValues = [
            self::_50,
            self::_55,
            self::_60,
            self::_65,
            self::_70,
            self::_775,
            self::_85,
            self::_925,
            self::_100,
            self::_110,
            self::_125,
            self::_150,
            self::_175,
            self::_200,
            self::_250,
            self::_300,
            self::_400,
            self::_500,
        ];

        return static::getCombinedFormattedNumbers($modelGeneratedValues);
    }

    /**
     * Answers the need to add numbers formatted as floats to the enumerable
     * whole number string values (e.g. for '100', we also need '100.0'),
     * as this is the way these numbers appear to be coming back from the API.
     *
     * @param array $modelGeneratedNumbers
     * @return array The combined array of model-generated and dynamically-constructed
     * float-like formatted number values
     */
    public static function getCombinedFormattedNumbers($modelGeneratedNumbers)
    {
        $decimalValues = array_map(function ($number) {
            return number_format($number, 1);
        }, $modelGeneratedNumbers);

        $combinedValues = array_unique(
            array_merge($modelGeneratedNumbers, $decimalValues)
        );

        sort($combinedValues);

        return $combinedValues;
    }
}


