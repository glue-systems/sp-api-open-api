<?php
/**
 * BuyerInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\OrdersV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API only supports orders that are less than two years old. Orders more than two years old will not show in the API response.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\OrdersV0\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\OrdersV0\ObjectSerializer;

/**
 * BuyerInfo Class Doc Comment
 *
 * @category Class
 * @description Buyer information.
 * @package  Glue\SpApi\OpenAPI\Clients\OrdersV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BuyerInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BuyerInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'buyerEmail' => 'string',
        'buyerName' => 'string',
        'buyerCounty' => 'string',
        'buyerTaxInfo' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerTaxInfo',
        'purchaseOrderNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'buyerEmail' => null,
        'buyerName' => null,
        'buyerCounty' => null,
        'buyerTaxInfo' => null,
        'purchaseOrderNumber' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyerEmail' => 'BuyerEmail',
        'buyerName' => 'BuyerName',
        'buyerCounty' => 'BuyerCounty',
        'buyerTaxInfo' => 'BuyerTaxInfo',
        'purchaseOrderNumber' => 'PurchaseOrderNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyerEmail' => 'setBuyerEmail',
        'buyerName' => 'setBuyerName',
        'buyerCounty' => 'setBuyerCounty',
        'buyerTaxInfo' => 'setBuyerTaxInfo',
        'purchaseOrderNumber' => 'setPurchaseOrderNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyerEmail' => 'getBuyerEmail',
        'buyerName' => 'getBuyerName',
        'buyerCounty' => 'getBuyerCounty',
        'buyerTaxInfo' => 'getBuyerTaxInfo',
        'purchaseOrderNumber' => 'getPurchaseOrderNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyerEmail'] = isset($data['buyerEmail']) ? $data['buyerEmail'] : null;
        $this->container['buyerName'] = isset($data['buyerName']) ? $data['buyerName'] : null;
        $this->container['buyerCounty'] = isset($data['buyerCounty']) ? $data['buyerCounty'] : null;
        $this->container['buyerTaxInfo'] = isset($data['buyerTaxInfo']) ? $data['buyerTaxInfo'] : null;
        $this->container['purchaseOrderNumber'] = isset($data['purchaseOrderNumber']) ? $data['purchaseOrderNumber'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyerEmail
     *
     * @return string|null
     */
    public function getBuyerEmail()
    {
        return $this->container['buyerEmail'];
    }

    /**
     * Sets buyerEmail
     *
     * @param string|null $buyerEmail The anonymized email address of the buyer.
     *
     * @return $this
     */
    public function setBuyerEmail($buyerEmail)
    {
        $this->container['buyerEmail'] = $buyerEmail;

        return $this;
    }

    /**
     * Gets buyerName
     *
     * @return string|null
     */
    public function getBuyerName()
    {
        return $this->container['buyerName'];
    }

    /**
     * Sets buyerName
     *
     * @param string|null $buyerName The buyer name or the recipient name.
     *
     * @return $this
     */
    public function setBuyerName($buyerName)
    {
        $this->container['buyerName'] = $buyerName;

        return $this;
    }

    /**
     * Gets buyerCounty
     *
     * @return string|null
     */
    public function getBuyerCounty()
    {
        return $this->container['buyerCounty'];
    }

    /**
     * Sets buyerCounty
     *
     * @param string|null $buyerCounty The county of the buyer.
     *
     * @return $this
     */
    public function setBuyerCounty($buyerCounty)
    {
        $this->container['buyerCounty'] = $buyerCounty;

        return $this;
    }

    /**
     * Gets buyerTaxInfo
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerTaxInfo|null
     */
    public function getBuyerTaxInfo()
    {
        return $this->container['buyerTaxInfo'];
    }

    /**
     * Sets buyerTaxInfo
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerTaxInfo|null $buyerTaxInfo buyerTaxInfo
     *
     * @return $this
     */
    public function setBuyerTaxInfo($buyerTaxInfo)
    {
        $this->container['buyerTaxInfo'] = $buyerTaxInfo;

        return $this;
    }

    /**
     * Gets purchaseOrderNumber
     *
     * @return string|null
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchaseOrderNumber'];
    }

    /**
     * Sets purchaseOrderNumber
     *
     * @param string|null $purchaseOrderNumber The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout.
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchaseOrderNumber)
    {
        $this->container['purchaseOrderNumber'] = $purchaseOrderNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


