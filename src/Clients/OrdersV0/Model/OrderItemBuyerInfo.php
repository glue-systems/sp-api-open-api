<?php
/**
 * OrderItemBuyerInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\OrdersV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API only supports orders that are less than two years old. Orders more than two years old will not show in the API response.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\OrdersV0\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\OrdersV0\ObjectSerializer;

/**
 * OrderItemBuyerInfo Class Doc Comment
 *
 * @category Class
 * @description A single order item&#39;s buyer information.
 * @package  Glue\SpApi\OpenAPI\Clients\OrdersV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderItemBuyerInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItemBuyerInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orderItemId' => 'string',
        'buyerCustomizedInfo' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerCustomizedInfoDetail',
        'giftWrapPrice' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'giftWrapTax' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'giftMessageText' => 'string',
        'giftWrapLevel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'orderItemId' => null,
        'buyerCustomizedInfo' => null,
        'giftWrapPrice' => null,
        'giftWrapTax' => null,
        'giftMessageText' => null,
        'giftWrapLevel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderItemId' => 'OrderItemId',
        'buyerCustomizedInfo' => 'BuyerCustomizedInfo',
        'giftWrapPrice' => 'GiftWrapPrice',
        'giftWrapTax' => 'GiftWrapTax',
        'giftMessageText' => 'GiftMessageText',
        'giftWrapLevel' => 'GiftWrapLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderItemId' => 'setOrderItemId',
        'buyerCustomizedInfo' => 'setBuyerCustomizedInfo',
        'giftWrapPrice' => 'setGiftWrapPrice',
        'giftWrapTax' => 'setGiftWrapTax',
        'giftMessageText' => 'setGiftMessageText',
        'giftWrapLevel' => 'setGiftWrapLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderItemId' => 'getOrderItemId',
        'buyerCustomizedInfo' => 'getBuyerCustomizedInfo',
        'giftWrapPrice' => 'getGiftWrapPrice',
        'giftWrapTax' => 'getGiftWrapTax',
        'giftMessageText' => 'getGiftMessageText',
        'giftWrapLevel' => 'getGiftWrapLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderItemId'] = isset($data['orderItemId']) ? $data['orderItemId'] : null;
        $this->container['buyerCustomizedInfo'] = isset($data['buyerCustomizedInfo']) ? $data['buyerCustomizedInfo'] : null;
        $this->container['giftWrapPrice'] = isset($data['giftWrapPrice']) ? $data['giftWrapPrice'] : null;
        $this->container['giftWrapTax'] = isset($data['giftWrapTax']) ? $data['giftWrapTax'] : null;
        $this->container['giftMessageText'] = isset($data['giftMessageText']) ? $data['giftMessageText'] : null;
        $this->container['giftWrapLevel'] = isset($data['giftWrapLevel']) ? $data['giftWrapLevel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orderItemId'] === null) {
            $invalidProperties[] = "'orderItemId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderItemId
     *
     * @return string
     */
    public function getOrderItemId()
    {
        return $this->container['orderItemId'];
    }

    /**
     * Sets orderItemId
     *
     * @param string $orderItemId An Amazon-defined order item identifier.
     *
     * @return $this
     */
    public function setOrderItemId($orderItemId)
    {
        $this->container['orderItemId'] = $orderItemId;

        return $this;
    }

    /**
     * Gets buyerCustomizedInfo
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerCustomizedInfoDetail|null
     */
    public function getBuyerCustomizedInfo()
    {
        return $this->container['buyerCustomizedInfo'];
    }

    /**
     * Sets buyerCustomizedInfo
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerCustomizedInfoDetail|null $buyerCustomizedInfo buyerCustomizedInfo
     *
     * @return $this
     */
    public function setBuyerCustomizedInfo($buyerCustomizedInfo)
    {
        $this->container['buyerCustomizedInfo'] = $buyerCustomizedInfo;

        return $this;
    }

    /**
     * Gets giftWrapPrice
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getGiftWrapPrice()
    {
        return $this->container['giftWrapPrice'];
    }

    /**
     * Sets giftWrapPrice
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $giftWrapPrice giftWrapPrice
     *
     * @return $this
     */
    public function setGiftWrapPrice($giftWrapPrice)
    {
        $this->container['giftWrapPrice'] = $giftWrapPrice;

        return $this;
    }

    /**
     * Gets giftWrapTax
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getGiftWrapTax()
    {
        return $this->container['giftWrapTax'];
    }

    /**
     * Sets giftWrapTax
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $giftWrapTax giftWrapTax
     *
     * @return $this
     */
    public function setGiftWrapTax($giftWrapTax)
    {
        $this->container['giftWrapTax'] = $giftWrapTax;

        return $this;
    }

    /**
     * Gets giftMessageText
     *
     * @return string|null
     */
    public function getGiftMessageText()
    {
        return $this->container['giftMessageText'];
    }

    /**
     * Sets giftMessageText
     *
     * @param string|null $giftMessageText A gift message provided by the buyer.
     *
     * @return $this
     */
    public function setGiftMessageText($giftMessageText)
    {
        $this->container['giftMessageText'] = $giftMessageText;

        return $this;
    }

    /**
     * Gets giftWrapLevel
     *
     * @return string|null
     */
    public function getGiftWrapLevel()
    {
        return $this->container['giftWrapLevel'];
    }

    /**
     * Sets giftWrapLevel
     *
     * @param string|null $giftWrapLevel The gift wrap level specified by the buyer.
     *
     * @return $this
     */
    public function setGiftWrapLevel($giftWrapLevel)
    {
        $this->container['giftWrapLevel'] = $giftWrapLevel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


