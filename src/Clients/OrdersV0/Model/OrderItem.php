<?php
/**
 * OrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\OrdersV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API only supports orders that are less than two years old. Orders more than two years old will not show in the API response.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\OrdersV0\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\OrdersV0\ObjectSerializer;

/**
 * OrderItem Class Doc Comment
 *
 * @category Class
 * @description A single order item.
 * @package  Glue\SpApi\OpenAPI\Clients\OrdersV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aSIN' => 'string',
        'sellerSKU' => 'string',
        'orderItemId' => 'string',
        'title' => 'string',
        'quantityOrdered' => 'int',
        'quantityShipped' => 'int',
        'productInfo' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ProductInfoDetail',
        'pointsGranted' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\PointsGrantedDetail',
        'itemPrice' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'shippingPrice' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'itemTax' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'shippingTax' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'shippingDiscount' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'shippingDiscountTax' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'promotionDiscount' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'promotionDiscountTax' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'promotionIds' => 'string[]',
        'cODFee' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'cODFeeDiscount' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'isGift' => 'bool',
        'conditionNote' => 'string',
        'conditionId' => 'string',
        'conditionSubtypeId' => 'string',
        'scheduledDeliveryStartDate' => 'string',
        'scheduledDeliveryEndDate' => 'string',
        'priceDesignation' => 'string',
        'taxCollection' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\TaxCollection',
        'serialNumberRequired' => 'bool',
        'isTransparency' => 'bool',
        'iossNumber' => 'string',
        'storeChainStoreId' => 'string',
        'deemedResellerCategory' => 'string',
        'buyerInfo' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ItemBuyerInfo',
        'buyerRequestedCancel' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerRequestedCancel',
        'serialNumbers' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'aSIN' => null,
        'sellerSKU' => null,
        'orderItemId' => null,
        'title' => null,
        'quantityOrdered' => null,
        'quantityShipped' => null,
        'productInfo' => null,
        'pointsGranted' => null,
        'itemPrice' => null,
        'shippingPrice' => null,
        'itemTax' => null,
        'shippingTax' => null,
        'shippingDiscount' => null,
        'shippingDiscountTax' => null,
        'promotionDiscount' => null,
        'promotionDiscountTax' => null,
        'promotionIds' => null,
        'cODFee' => null,
        'cODFeeDiscount' => null,
        'isGift' => null,
        'conditionNote' => null,
        'conditionId' => null,
        'conditionSubtypeId' => null,
        'scheduledDeliveryStartDate' => null,
        'scheduledDeliveryEndDate' => null,
        'priceDesignation' => null,
        'taxCollection' => null,
        'serialNumberRequired' => null,
        'isTransparency' => null,
        'iossNumber' => null,
        'storeChainStoreId' => null,
        'deemedResellerCategory' => null,
        'buyerInfo' => null,
        'buyerRequestedCancel' => null,
        'serialNumbers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aSIN' => 'ASIN',
        'sellerSKU' => 'SellerSKU',
        'orderItemId' => 'OrderItemId',
        'title' => 'Title',
        'quantityOrdered' => 'QuantityOrdered',
        'quantityShipped' => 'QuantityShipped',
        'productInfo' => 'ProductInfo',
        'pointsGranted' => 'PointsGranted',
        'itemPrice' => 'ItemPrice',
        'shippingPrice' => 'ShippingPrice',
        'itemTax' => 'ItemTax',
        'shippingTax' => 'ShippingTax',
        'shippingDiscount' => 'ShippingDiscount',
        'shippingDiscountTax' => 'ShippingDiscountTax',
        'promotionDiscount' => 'PromotionDiscount',
        'promotionDiscountTax' => 'PromotionDiscountTax',
        'promotionIds' => 'PromotionIds',
        'cODFee' => 'CODFee',
        'cODFeeDiscount' => 'CODFeeDiscount',
        'isGift' => 'IsGift',
        'conditionNote' => 'ConditionNote',
        'conditionId' => 'ConditionId',
        'conditionSubtypeId' => 'ConditionSubtypeId',
        'scheduledDeliveryStartDate' => 'ScheduledDeliveryStartDate',
        'scheduledDeliveryEndDate' => 'ScheduledDeliveryEndDate',
        'priceDesignation' => 'PriceDesignation',
        'taxCollection' => 'TaxCollection',
        'serialNumberRequired' => 'SerialNumberRequired',
        'isTransparency' => 'IsTransparency',
        'iossNumber' => 'IossNumber',
        'storeChainStoreId' => 'StoreChainStoreId',
        'deemedResellerCategory' => 'DeemedResellerCategory',
        'buyerInfo' => 'BuyerInfo',
        'buyerRequestedCancel' => 'BuyerRequestedCancel',
        'serialNumbers' => 'SerialNumbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aSIN' => 'setASIN',
        'sellerSKU' => 'setSellerSKU',
        'orderItemId' => 'setOrderItemId',
        'title' => 'setTitle',
        'quantityOrdered' => 'setQuantityOrdered',
        'quantityShipped' => 'setQuantityShipped',
        'productInfo' => 'setProductInfo',
        'pointsGranted' => 'setPointsGranted',
        'itemPrice' => 'setItemPrice',
        'shippingPrice' => 'setShippingPrice',
        'itemTax' => 'setItemTax',
        'shippingTax' => 'setShippingTax',
        'shippingDiscount' => 'setShippingDiscount',
        'shippingDiscountTax' => 'setShippingDiscountTax',
        'promotionDiscount' => 'setPromotionDiscount',
        'promotionDiscountTax' => 'setPromotionDiscountTax',
        'promotionIds' => 'setPromotionIds',
        'cODFee' => 'setCODFee',
        'cODFeeDiscount' => 'setCODFeeDiscount',
        'isGift' => 'setIsGift',
        'conditionNote' => 'setConditionNote',
        'conditionId' => 'setConditionId',
        'conditionSubtypeId' => 'setConditionSubtypeId',
        'scheduledDeliveryStartDate' => 'setScheduledDeliveryStartDate',
        'scheduledDeliveryEndDate' => 'setScheduledDeliveryEndDate',
        'priceDesignation' => 'setPriceDesignation',
        'taxCollection' => 'setTaxCollection',
        'serialNumberRequired' => 'setSerialNumberRequired',
        'isTransparency' => 'setIsTransparency',
        'iossNumber' => 'setIossNumber',
        'storeChainStoreId' => 'setStoreChainStoreId',
        'deemedResellerCategory' => 'setDeemedResellerCategory',
        'buyerInfo' => 'setBuyerInfo',
        'buyerRequestedCancel' => 'setBuyerRequestedCancel',
        'serialNumbers' => 'setSerialNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aSIN' => 'getASIN',
        'sellerSKU' => 'getSellerSKU',
        'orderItemId' => 'getOrderItemId',
        'title' => 'getTitle',
        'quantityOrdered' => 'getQuantityOrdered',
        'quantityShipped' => 'getQuantityShipped',
        'productInfo' => 'getProductInfo',
        'pointsGranted' => 'getPointsGranted',
        'itemPrice' => 'getItemPrice',
        'shippingPrice' => 'getShippingPrice',
        'itemTax' => 'getItemTax',
        'shippingTax' => 'getShippingTax',
        'shippingDiscount' => 'getShippingDiscount',
        'shippingDiscountTax' => 'getShippingDiscountTax',
        'promotionDiscount' => 'getPromotionDiscount',
        'promotionDiscountTax' => 'getPromotionDiscountTax',
        'promotionIds' => 'getPromotionIds',
        'cODFee' => 'getCODFee',
        'cODFeeDiscount' => 'getCODFeeDiscount',
        'isGift' => 'getIsGift',
        'conditionNote' => 'getConditionNote',
        'conditionId' => 'getConditionId',
        'conditionSubtypeId' => 'getConditionSubtypeId',
        'scheduledDeliveryStartDate' => 'getScheduledDeliveryStartDate',
        'scheduledDeliveryEndDate' => 'getScheduledDeliveryEndDate',
        'priceDesignation' => 'getPriceDesignation',
        'taxCollection' => 'getTaxCollection',
        'serialNumberRequired' => 'getSerialNumberRequired',
        'isTransparency' => 'getIsTransparency',
        'iossNumber' => 'getIossNumber',
        'storeChainStoreId' => 'getStoreChainStoreId',
        'deemedResellerCategory' => 'getDeemedResellerCategory',
        'buyerInfo' => 'getBuyerInfo',
        'buyerRequestedCancel' => 'getBuyerRequestedCancel',
        'serialNumbers' => 'getSerialNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DEEMED_RESELLER_CATEGORY_IOSS = 'IOSS';
    const DEEMED_RESELLER_CATEGORY_UOSS = 'UOSS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeemedResellerCategoryAllowableValues()
    {
        return [
            self::DEEMED_RESELLER_CATEGORY_IOSS,
            self::DEEMED_RESELLER_CATEGORY_UOSS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aSIN'] = isset($data['aSIN']) ? $data['aSIN'] : null;
        $this->container['sellerSKU'] = isset($data['sellerSKU']) ? $data['sellerSKU'] : null;
        $this->container['orderItemId'] = isset($data['orderItemId']) ? $data['orderItemId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['quantityOrdered'] = isset($data['quantityOrdered']) ? $data['quantityOrdered'] : null;
        $this->container['quantityShipped'] = isset($data['quantityShipped']) ? $data['quantityShipped'] : null;
        $this->container['productInfo'] = isset($data['productInfo']) ? $data['productInfo'] : null;
        $this->container['pointsGranted'] = isset($data['pointsGranted']) ? $data['pointsGranted'] : null;
        $this->container['itemPrice'] = isset($data['itemPrice']) ? $data['itemPrice'] : null;
        $this->container['shippingPrice'] = isset($data['shippingPrice']) ? $data['shippingPrice'] : null;
        $this->container['itemTax'] = isset($data['itemTax']) ? $data['itemTax'] : null;
        $this->container['shippingTax'] = isset($data['shippingTax']) ? $data['shippingTax'] : null;
        $this->container['shippingDiscount'] = isset($data['shippingDiscount']) ? $data['shippingDiscount'] : null;
        $this->container['shippingDiscountTax'] = isset($data['shippingDiscountTax']) ? $data['shippingDiscountTax'] : null;
        $this->container['promotionDiscount'] = isset($data['promotionDiscount']) ? $data['promotionDiscount'] : null;
        $this->container['promotionDiscountTax'] = isset($data['promotionDiscountTax']) ? $data['promotionDiscountTax'] : null;
        $this->container['promotionIds'] = isset($data['promotionIds']) ? $data['promotionIds'] : null;
        $this->container['cODFee'] = isset($data['cODFee']) ? $data['cODFee'] : null;
        $this->container['cODFeeDiscount'] = isset($data['cODFeeDiscount']) ? $data['cODFeeDiscount'] : null;
        $this->container['isGift'] = isset($data['isGift']) ? $data['isGift'] : null;
        $this->container['conditionNote'] = isset($data['conditionNote']) ? $data['conditionNote'] : null;
        $this->container['conditionId'] = isset($data['conditionId']) ? $data['conditionId'] : null;
        $this->container['conditionSubtypeId'] = isset($data['conditionSubtypeId']) ? $data['conditionSubtypeId'] : null;
        $this->container['scheduledDeliveryStartDate'] = isset($data['scheduledDeliveryStartDate']) ? $data['scheduledDeliveryStartDate'] : null;
        $this->container['scheduledDeliveryEndDate'] = isset($data['scheduledDeliveryEndDate']) ? $data['scheduledDeliveryEndDate'] : null;
        $this->container['priceDesignation'] = isset($data['priceDesignation']) ? $data['priceDesignation'] : null;
        $this->container['taxCollection'] = isset($data['taxCollection']) ? $data['taxCollection'] : null;
        $this->container['serialNumberRequired'] = isset($data['serialNumberRequired']) ? $data['serialNumberRequired'] : null;
        $this->container['isTransparency'] = isset($data['isTransparency']) ? $data['isTransparency'] : null;
        $this->container['iossNumber'] = isset($data['iossNumber']) ? $data['iossNumber'] : null;
        $this->container['storeChainStoreId'] = isset($data['storeChainStoreId']) ? $data['storeChainStoreId'] : null;
        $this->container['deemedResellerCategory'] = isset($data['deemedResellerCategory']) ? $data['deemedResellerCategory'] : null;
        $this->container['buyerInfo'] = isset($data['buyerInfo']) ? $data['buyerInfo'] : null;
        $this->container['buyerRequestedCancel'] = isset($data['buyerRequestedCancel']) ? $data['buyerRequestedCancel'] : null;
        $this->container['serialNumbers'] = isset($data['serialNumbers']) ? $data['serialNumbers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['aSIN'] === null) {
            $invalidProperties[] = "'aSIN' can't be null";
        }
        if ($this->container['orderItemId'] === null) {
            $invalidProperties[] = "'orderItemId' can't be null";
        }
        if ($this->container['quantityOrdered'] === null) {
            $invalidProperties[] = "'quantityOrdered' can't be null";
        }
        $allowedValues = $this->getDeemedResellerCategoryAllowableValues();
        if (!is_null($this->container['deemedResellerCategory']) && !in_array($this->container['deemedResellerCategory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deemedResellerCategory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aSIN
     *
     * @return string
     */
    public function getASIN()
    {
        return $this->container['aSIN'];
    }

    /**
     * Sets aSIN
     *
     * @param string $aSIN The Amazon Standard Identification Number (ASIN) of the item.
     *
     * @return $this
     */
    public function setASIN($aSIN)
    {
        $this->container['aSIN'] = $aSIN;

        return $this;
    }

    /**
     * Gets sellerSKU
     *
     * @return string|null
     */
    public function getSellerSKU()
    {
        return $this->container['sellerSKU'];
    }

    /**
     * Sets sellerSKU
     *
     * @param string|null $sellerSKU The seller stock keeping unit (SKU) of the item.
     *
     * @return $this
     */
    public function setSellerSKU($sellerSKU)
    {
        $this->container['sellerSKU'] = $sellerSKU;

        return $this;
    }

    /**
     * Gets orderItemId
     *
     * @return string
     */
    public function getOrderItemId()
    {
        return $this->container['orderItemId'];
    }

    /**
     * Sets orderItemId
     *
     * @param string $orderItemId An Amazon-defined order item identifier.
     *
     * @return $this
     */
    public function setOrderItemId($orderItemId)
    {
        $this->container['orderItemId'] = $orderItemId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The name of the item.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets quantityOrdered
     *
     * @return int
     */
    public function getQuantityOrdered()
    {
        return $this->container['quantityOrdered'];
    }

    /**
     * Sets quantityOrdered
     *
     * @param int $quantityOrdered The number of items in the order.
     *
     * @return $this
     */
    public function setQuantityOrdered($quantityOrdered)
    {
        $this->container['quantityOrdered'] = $quantityOrdered;

        return $this;
    }

    /**
     * Gets quantityShipped
     *
     * @return int|null
     */
    public function getQuantityShipped()
    {
        return $this->container['quantityShipped'];
    }

    /**
     * Sets quantityShipped
     *
     * @param int|null $quantityShipped The number of items shipped.
     *
     * @return $this
     */
    public function setQuantityShipped($quantityShipped)
    {
        $this->container['quantityShipped'] = $quantityShipped;

        return $this;
    }

    /**
     * Gets productInfo
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ProductInfoDetail|null
     */
    public function getProductInfo()
    {
        return $this->container['productInfo'];
    }

    /**
     * Sets productInfo
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ProductInfoDetail|null $productInfo productInfo
     *
     * @return $this
     */
    public function setProductInfo($productInfo)
    {
        $this->container['productInfo'] = $productInfo;

        return $this;
    }

    /**
     * Gets pointsGranted
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\PointsGrantedDetail|null
     */
    public function getPointsGranted()
    {
        return $this->container['pointsGranted'];
    }

    /**
     * Sets pointsGranted
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\PointsGrantedDetail|null $pointsGranted pointsGranted
     *
     * @return $this
     */
    public function setPointsGranted($pointsGranted)
    {
        $this->container['pointsGranted'] = $pointsGranted;

        return $this;
    }

    /**
     * Gets itemPrice
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getItemPrice()
    {
        return $this->container['itemPrice'];
    }

    /**
     * Sets itemPrice
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $itemPrice itemPrice
     *
     * @return $this
     */
    public function setItemPrice($itemPrice)
    {
        $this->container['itemPrice'] = $itemPrice;

        return $this;
    }

    /**
     * Gets shippingPrice
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getShippingPrice()
    {
        return $this->container['shippingPrice'];
    }

    /**
     * Sets shippingPrice
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $shippingPrice shippingPrice
     *
     * @return $this
     */
    public function setShippingPrice($shippingPrice)
    {
        $this->container['shippingPrice'] = $shippingPrice;

        return $this;
    }

    /**
     * Gets itemTax
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getItemTax()
    {
        return $this->container['itemTax'];
    }

    /**
     * Sets itemTax
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $itemTax itemTax
     *
     * @return $this
     */
    public function setItemTax($itemTax)
    {
        $this->container['itemTax'] = $itemTax;

        return $this;
    }

    /**
     * Gets shippingTax
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getShippingTax()
    {
        return $this->container['shippingTax'];
    }

    /**
     * Sets shippingTax
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $shippingTax shippingTax
     *
     * @return $this
     */
    public function setShippingTax($shippingTax)
    {
        $this->container['shippingTax'] = $shippingTax;

        return $this;
    }

    /**
     * Gets shippingDiscount
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getShippingDiscount()
    {
        return $this->container['shippingDiscount'];
    }

    /**
     * Sets shippingDiscount
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $shippingDiscount shippingDiscount
     *
     * @return $this
     */
    public function setShippingDiscount($shippingDiscount)
    {
        $this->container['shippingDiscount'] = $shippingDiscount;

        return $this;
    }

    /**
     * Gets shippingDiscountTax
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getShippingDiscountTax()
    {
        return $this->container['shippingDiscountTax'];
    }

    /**
     * Sets shippingDiscountTax
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $shippingDiscountTax shippingDiscountTax
     *
     * @return $this
     */
    public function setShippingDiscountTax($shippingDiscountTax)
    {
        $this->container['shippingDiscountTax'] = $shippingDiscountTax;

        return $this;
    }

    /**
     * Gets promotionDiscount
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getPromotionDiscount()
    {
        return $this->container['promotionDiscount'];
    }

    /**
     * Sets promotionDiscount
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $promotionDiscount promotionDiscount
     *
     * @return $this
     */
    public function setPromotionDiscount($promotionDiscount)
    {
        $this->container['promotionDiscount'] = $promotionDiscount;

        return $this;
    }

    /**
     * Gets promotionDiscountTax
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getPromotionDiscountTax()
    {
        return $this->container['promotionDiscountTax'];
    }

    /**
     * Sets promotionDiscountTax
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $promotionDiscountTax promotionDiscountTax
     *
     * @return $this
     */
    public function setPromotionDiscountTax($promotionDiscountTax)
    {
        $this->container['promotionDiscountTax'] = $promotionDiscountTax;

        return $this;
    }

    /**
     * Gets promotionIds
     *
     * @return string[]|null
     */
    public function getPromotionIds()
    {
        return $this->container['promotionIds'];
    }

    /**
     * Sets promotionIds
     *
     * @param string[]|null $promotionIds A list of promotion identifiers provided by the seller when the promotions were created.
     *
     * @return $this
     */
    public function setPromotionIds($promotionIds)
    {
        $this->container['promotionIds'] = $promotionIds;

        return $this;
    }

    /**
     * Gets cODFee
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getCODFee()
    {
        return $this->container['cODFee'];
    }

    /**
     * Sets cODFee
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $cODFee cODFee
     *
     * @return $this
     */
    public function setCODFee($cODFee)
    {
        $this->container['cODFee'] = $cODFee;

        return $this;
    }

    /**
     * Gets cODFeeDiscount
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getCODFeeDiscount()
    {
        return $this->container['cODFeeDiscount'];
    }

    /**
     * Sets cODFeeDiscount
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $cODFeeDiscount cODFeeDiscount
     *
     * @return $this
     */
    public function setCODFeeDiscount($cODFeeDiscount)
    {
        $this->container['cODFeeDiscount'] = $cODFeeDiscount;

        return $this;
    }

    /**
     * Gets isGift
     *
     * @return bool|null
     */
    public function getIsGift()
    {
        return $this->container['isGift'];
    }

    /**
     * Sets isGift
     *
     * @param bool|null $isGift When true, the item is a gift.
     *
     * @return $this
     */
    public function setIsGift($isGift)
    {
        $this->container['isGift'] = $isGift;

        return $this;
    }

    /**
     * Gets conditionNote
     *
     * @return string|null
     */
    public function getConditionNote()
    {
        return $this->container['conditionNote'];
    }

    /**
     * Sets conditionNote
     *
     * @param string|null $conditionNote The condition of the item as described by the seller.
     *
     * @return $this
     */
    public function setConditionNote($conditionNote)
    {
        $this->container['conditionNote'] = $conditionNote;

        return $this;
    }

    /**
     * Gets conditionId
     *
     * @return string|null
     */
    public function getConditionId()
    {
        return $this->container['conditionId'];
    }

    /**
     * Sets conditionId
     *
     * @param string|null $conditionId The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
     *
     * @return $this
     */
    public function setConditionId($conditionId)
    {
        $this->container['conditionId'] = $conditionId;

        return $this;
    }

    /**
     * Gets conditionSubtypeId
     *
     * @return string|null
     */
    public function getConditionSubtypeId()
    {
        return $this->container['conditionSubtypeId'];
    }

    /**
     * Sets conditionSubtypeId
     *
     * @param string|null $conditionSubtypeId The subcondition of the item.  Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
     *
     * @return $this
     */
    public function setConditionSubtypeId($conditionSubtypeId)
    {
        $this->container['conditionSubtypeId'] = $conditionSubtypeId;

        return $this;
    }

    /**
     * Gets scheduledDeliveryStartDate
     *
     * @return string|null
     */
    public function getScheduledDeliveryStartDate()
    {
        return $this->container['scheduledDeliveryStartDate'];
    }

    /**
     * Sets scheduledDeliveryStartDate
     *
     * @param string|null $scheduledDeliveryStartDate The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
     *
     * @return $this
     */
    public function setScheduledDeliveryStartDate($scheduledDeliveryStartDate)
    {
        $this->container['scheduledDeliveryStartDate'] = $scheduledDeliveryStartDate;

        return $this;
    }

    /**
     * Gets scheduledDeliveryEndDate
     *
     * @return string|null
     */
    public function getScheduledDeliveryEndDate()
    {
        return $this->container['scheduledDeliveryEndDate'];
    }

    /**
     * Sets scheduledDeliveryEndDate
     *
     * @param string|null $scheduledDeliveryEndDate The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
     *
     * @return $this
     */
    public function setScheduledDeliveryEndDate($scheduledDeliveryEndDate)
    {
        $this->container['scheduledDeliveryEndDate'] = $scheduledDeliveryEndDate;

        return $this;
    }

    /**
     * Gets priceDesignation
     *
     * @return string|null
     */
    public function getPriceDesignation()
    {
        return $this->container['priceDesignation'];
    }

    /**
     * Sets priceDesignation
     *
     * @param string|null $priceDesignation Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that is available only for Amazon Business orders.
     *
     * @return $this
     */
    public function setPriceDesignation($priceDesignation)
    {
        $this->container['priceDesignation'] = $priceDesignation;

        return $this;
    }

    /**
     * Gets taxCollection
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\TaxCollection|null
     */
    public function getTaxCollection()
    {
        return $this->container['taxCollection'];
    }

    /**
     * Sets taxCollection
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\TaxCollection|null $taxCollection taxCollection
     *
     * @return $this
     */
    public function setTaxCollection($taxCollection)
    {
        $this->container['taxCollection'] = $taxCollection;

        return $this;
    }

    /**
     * Gets serialNumberRequired
     *
     * @return bool|null
     */
    public function getSerialNumberRequired()
    {
        return $this->container['serialNumberRequired'];
    }

    /**
     * Sets serialNumberRequired
     *
     * @param bool|null $serialNumberRequired When true, the product type for this item has a serial number.  Returned only for Amazon Easy Ship orders.
     *
     * @return $this
     */
    public function setSerialNumberRequired($serialNumberRequired)
    {
        $this->container['serialNumberRequired'] = $serialNumberRequired;

        return $this;
    }

    /**
     * Gets isTransparency
     *
     * @return bool|null
     */
    public function getIsTransparency()
    {
        return $this->container['isTransparency'];
    }

    /**
     * Sets isTransparency
     *
     * @param bool|null $isTransparency When true, transparency codes are required.
     *
     * @return $this
     */
    public function setIsTransparency($isTransparency)
    {
        $this->container['isTransparency'] = $isTransparency;

        return $this;
    }

    /**
     * Gets iossNumber
     *
     * @return string|null
     */
    public function getIossNumber()
    {
        return $this->container['iossNumber'];
    }

    /**
     * Sets iossNumber
     *
     * @param string|null $iossNumber The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
     *
     * @return $this
     */
    public function setIossNumber($iossNumber)
    {
        $this->container['iossNumber'] = $iossNumber;

        return $this;
    }

    /**
     * Gets storeChainStoreId
     *
     * @return string|null
     */
    public function getStoreChainStoreId()
    {
        return $this->container['storeChainStoreId'];
    }

    /**
     * Sets storeChainStoreId
     *
     * @param string|null $storeChainStoreId The store chain store identifier. Linked to a specific store in a store chain.
     *
     * @return $this
     */
    public function setStoreChainStoreId($storeChainStoreId)
    {
        $this->container['storeChainStoreId'] = $storeChainStoreId;

        return $this;
    }

    /**
     * Gets deemedResellerCategory
     *
     * @return string|null
     */
    public function getDeemedResellerCategory()
    {
        return $this->container['deemedResellerCategory'];
    }

    /**
     * Sets deemedResellerCategory
     *
     * @param string|null $deemedResellerCategory The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
     *
     * @return $this
     */
    public function setDeemedResellerCategory($deemedResellerCategory)
    {
        $allowedValues = $this->getDeemedResellerCategoryAllowableValues();
        if (!is_null($deemedResellerCategory) && !in_array($deemedResellerCategory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deemedResellerCategory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deemedResellerCategory'] = $deemedResellerCategory;

        return $this;
    }

    /**
     * Gets buyerInfo
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ItemBuyerInfo|null
     */
    public function getBuyerInfo()
    {
        return $this->container['buyerInfo'];
    }

    /**
     * Sets buyerInfo
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ItemBuyerInfo|null $buyerInfo buyerInfo
     *
     * @return $this
     */
    public function setBuyerInfo($buyerInfo)
    {
        $this->container['buyerInfo'] = $buyerInfo;

        return $this;
    }

    /**
     * Gets buyerRequestedCancel
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerRequestedCancel|null
     */
    public function getBuyerRequestedCancel()
    {
        return $this->container['buyerRequestedCancel'];
    }

    /**
     * Sets buyerRequestedCancel
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerRequestedCancel|null $buyerRequestedCancel buyerRequestedCancel
     *
     * @return $this
     */
    public function setBuyerRequestedCancel($buyerRequestedCancel)
    {
        $this->container['buyerRequestedCancel'] = $buyerRequestedCancel;

        return $this;
    }

    /**
     * Gets serialNumbers
     *
     * @return string[]|null
     */
    public function getSerialNumbers()
    {
        return $this->container['serialNumbers'];
    }

    /**
     * Sets serialNumbers
     *
     * @param string[]|null $serialNumbers A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only.
     *
     * @return $this
     */
    public function setSerialNumbers($serialNumbers)
    {
        $this->container['serialNumbers'] = $serialNumbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


