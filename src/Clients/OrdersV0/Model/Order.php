<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\OrdersV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API only supports orders that are less than two years old. Orders more than two years old will not show in the API response.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\OrdersV0\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\OrdersV0\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description Order information.
 * @package  Glue\SpApi\OpenAPI\Clients\OrdersV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amazonOrderId' => 'string',
        'sellerOrderId' => 'string',
        'purchaseDate' => 'string',
        'lastUpdateDate' => 'string',
        'orderStatus' => 'string',
        'fulfillmentChannel' => 'string',
        'salesChannel' => 'string',
        'orderChannel' => 'string',
        'shipServiceLevel' => 'string',
        'orderTotal' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money',
        'numberOfItemsShipped' => 'int',
        'numberOfItemsUnshipped' => 'int',
        'paymentExecutionDetail' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\PaymentExecutionDetailItem[]',
        'paymentMethod' => 'string',
        'paymentMethodDetails' => 'string[]',
        'marketplaceId' => 'string',
        'shipmentServiceLevelCategory' => 'string',
        'easyShipShipmentStatus' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\EasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'string',
        'orderType' => 'string',
        'earliestShipDate' => 'string',
        'latestShipDate' => 'string',
        'earliestDeliveryDate' => 'string',
        'latestDeliveryDate' => 'string',
        'isBusinessOrder' => 'bool',
        'isPrime' => 'bool',
        'isPremiumOrder' => 'bool',
        'isGlobalExpressEnabled' => 'bool',
        'replacedOrderId' => 'string',
        'isReplacementOrder' => 'bool',
        'promiseResponseDueDate' => 'string',
        'isEstimatedShipDateSet' => 'bool',
        'isSoldByAB' => 'bool',
        'isIBA' => 'bool',
        'defaultShipFromLocationAddress' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Address',
        'buyerInvoicePreference' => 'string',
        'buyerTaxInformation' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerTaxInformation',
        'fulfillmentInstruction' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\FulfillmentInstruction',
        'isISPU' => 'bool',
        'isAccessPointOrder' => 'bool',
        'marketplaceTaxInfo' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\MarketplaceTaxInfo',
        'sellerDisplayName' => 'string',
        'shippingAddress' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Address',
        'buyerInfo' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerInfo',
        'automatedShippingSettings' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\AutomatedShippingSettings',
        'hasRegulatedItems' => 'bool',
        'electronicInvoiceStatus' => '\Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ElectronicInvoiceStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'amazonOrderId' => null,
        'sellerOrderId' => null,
        'purchaseDate' => null,
        'lastUpdateDate' => null,
        'orderStatus' => null,
        'fulfillmentChannel' => null,
        'salesChannel' => null,
        'orderChannel' => null,
        'shipServiceLevel' => null,
        'orderTotal' => null,
        'numberOfItemsShipped' => null,
        'numberOfItemsUnshipped' => null,
        'paymentExecutionDetail' => null,
        'paymentMethod' => null,
        'paymentMethodDetails' => null,
        'marketplaceId' => null,
        'shipmentServiceLevelCategory' => null,
        'easyShipShipmentStatus' => null,
        'cbaDisplayableShippingLabel' => null,
        'orderType' => null,
        'earliestShipDate' => null,
        'latestShipDate' => null,
        'earliestDeliveryDate' => null,
        'latestDeliveryDate' => null,
        'isBusinessOrder' => null,
        'isPrime' => null,
        'isPremiumOrder' => null,
        'isGlobalExpressEnabled' => null,
        'replacedOrderId' => null,
        'isReplacementOrder' => null,
        'promiseResponseDueDate' => null,
        'isEstimatedShipDateSet' => null,
        'isSoldByAB' => null,
        'isIBA' => null,
        'defaultShipFromLocationAddress' => null,
        'buyerInvoicePreference' => null,
        'buyerTaxInformation' => null,
        'fulfillmentInstruction' => null,
        'isISPU' => null,
        'isAccessPointOrder' => null,
        'marketplaceTaxInfo' => null,
        'sellerDisplayName' => null,
        'shippingAddress' => null,
        'buyerInfo' => null,
        'automatedShippingSettings' => null,
        'hasRegulatedItems' => null,
        'electronicInvoiceStatus' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amazonOrderId' => 'AmazonOrderId',
        'sellerOrderId' => 'SellerOrderId',
        'purchaseDate' => 'PurchaseDate',
        'lastUpdateDate' => 'LastUpdateDate',
        'orderStatus' => 'OrderStatus',
        'fulfillmentChannel' => 'FulfillmentChannel',
        'salesChannel' => 'SalesChannel',
        'orderChannel' => 'OrderChannel',
        'shipServiceLevel' => 'ShipServiceLevel',
        'orderTotal' => 'OrderTotal',
        'numberOfItemsShipped' => 'NumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'NumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'PaymentExecutionDetail',
        'paymentMethod' => 'PaymentMethod',
        'paymentMethodDetails' => 'PaymentMethodDetails',
        'marketplaceId' => 'MarketplaceId',
        'shipmentServiceLevelCategory' => 'ShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'EasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'CbaDisplayableShippingLabel',
        'orderType' => 'OrderType',
        'earliestShipDate' => 'EarliestShipDate',
        'latestShipDate' => 'LatestShipDate',
        'earliestDeliveryDate' => 'EarliestDeliveryDate',
        'latestDeliveryDate' => 'LatestDeliveryDate',
        'isBusinessOrder' => 'IsBusinessOrder',
        'isPrime' => 'IsPrime',
        'isPremiumOrder' => 'IsPremiumOrder',
        'isGlobalExpressEnabled' => 'IsGlobalExpressEnabled',
        'replacedOrderId' => 'ReplacedOrderId',
        'isReplacementOrder' => 'IsReplacementOrder',
        'promiseResponseDueDate' => 'PromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'IsEstimatedShipDateSet',
        'isSoldByAB' => 'IsSoldByAB',
        'isIBA' => 'IsIBA',
        'defaultShipFromLocationAddress' => 'DefaultShipFromLocationAddress',
        'buyerInvoicePreference' => 'BuyerInvoicePreference',
        'buyerTaxInformation' => 'BuyerTaxInformation',
        'fulfillmentInstruction' => 'FulfillmentInstruction',
        'isISPU' => 'IsISPU',
        'isAccessPointOrder' => 'IsAccessPointOrder',
        'marketplaceTaxInfo' => 'MarketplaceTaxInfo',
        'sellerDisplayName' => 'SellerDisplayName',
        'shippingAddress' => 'ShippingAddress',
        'buyerInfo' => 'BuyerInfo',
        'automatedShippingSettings' => 'AutomatedShippingSettings',
        'hasRegulatedItems' => 'HasRegulatedItems',
        'electronicInvoiceStatus' => 'ElectronicInvoiceStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amazonOrderId' => 'setAmazonOrderId',
        'sellerOrderId' => 'setSellerOrderId',
        'purchaseDate' => 'setPurchaseDate',
        'lastUpdateDate' => 'setLastUpdateDate',
        'orderStatus' => 'setOrderStatus',
        'fulfillmentChannel' => 'setFulfillmentChannel',
        'salesChannel' => 'setSalesChannel',
        'orderChannel' => 'setOrderChannel',
        'shipServiceLevel' => 'setShipServiceLevel',
        'orderTotal' => 'setOrderTotal',
        'numberOfItemsShipped' => 'setNumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'setNumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'setPaymentExecutionDetail',
        'paymentMethod' => 'setPaymentMethod',
        'paymentMethodDetails' => 'setPaymentMethodDetails',
        'marketplaceId' => 'setMarketplaceId',
        'shipmentServiceLevelCategory' => 'setShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'setEasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'setCbaDisplayableShippingLabel',
        'orderType' => 'setOrderType',
        'earliestShipDate' => 'setEarliestShipDate',
        'latestShipDate' => 'setLatestShipDate',
        'earliestDeliveryDate' => 'setEarliestDeliveryDate',
        'latestDeliveryDate' => 'setLatestDeliveryDate',
        'isBusinessOrder' => 'setIsBusinessOrder',
        'isPrime' => 'setIsPrime',
        'isPremiumOrder' => 'setIsPremiumOrder',
        'isGlobalExpressEnabled' => 'setIsGlobalExpressEnabled',
        'replacedOrderId' => 'setReplacedOrderId',
        'isReplacementOrder' => 'setIsReplacementOrder',
        'promiseResponseDueDate' => 'setPromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'setIsEstimatedShipDateSet',
        'isSoldByAB' => 'setIsSoldByAB',
        'isIBA' => 'setIsIBA',
        'defaultShipFromLocationAddress' => 'setDefaultShipFromLocationAddress',
        'buyerInvoicePreference' => 'setBuyerInvoicePreference',
        'buyerTaxInformation' => 'setBuyerTaxInformation',
        'fulfillmentInstruction' => 'setFulfillmentInstruction',
        'isISPU' => 'setIsISPU',
        'isAccessPointOrder' => 'setIsAccessPointOrder',
        'marketplaceTaxInfo' => 'setMarketplaceTaxInfo',
        'sellerDisplayName' => 'setSellerDisplayName',
        'shippingAddress' => 'setShippingAddress',
        'buyerInfo' => 'setBuyerInfo',
        'automatedShippingSettings' => 'setAutomatedShippingSettings',
        'hasRegulatedItems' => 'setHasRegulatedItems',
        'electronicInvoiceStatus' => 'setElectronicInvoiceStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amazonOrderId' => 'getAmazonOrderId',
        'sellerOrderId' => 'getSellerOrderId',
        'purchaseDate' => 'getPurchaseDate',
        'lastUpdateDate' => 'getLastUpdateDate',
        'orderStatus' => 'getOrderStatus',
        'fulfillmentChannel' => 'getFulfillmentChannel',
        'salesChannel' => 'getSalesChannel',
        'orderChannel' => 'getOrderChannel',
        'shipServiceLevel' => 'getShipServiceLevel',
        'orderTotal' => 'getOrderTotal',
        'numberOfItemsShipped' => 'getNumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'getNumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'getPaymentExecutionDetail',
        'paymentMethod' => 'getPaymentMethod',
        'paymentMethodDetails' => 'getPaymentMethodDetails',
        'marketplaceId' => 'getMarketplaceId',
        'shipmentServiceLevelCategory' => 'getShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'getEasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'getCbaDisplayableShippingLabel',
        'orderType' => 'getOrderType',
        'earliestShipDate' => 'getEarliestShipDate',
        'latestShipDate' => 'getLatestShipDate',
        'earliestDeliveryDate' => 'getEarliestDeliveryDate',
        'latestDeliveryDate' => 'getLatestDeliveryDate',
        'isBusinessOrder' => 'getIsBusinessOrder',
        'isPrime' => 'getIsPrime',
        'isPremiumOrder' => 'getIsPremiumOrder',
        'isGlobalExpressEnabled' => 'getIsGlobalExpressEnabled',
        'replacedOrderId' => 'getReplacedOrderId',
        'isReplacementOrder' => 'getIsReplacementOrder',
        'promiseResponseDueDate' => 'getPromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'getIsEstimatedShipDateSet',
        'isSoldByAB' => 'getIsSoldByAB',
        'isIBA' => 'getIsIBA',
        'defaultShipFromLocationAddress' => 'getDefaultShipFromLocationAddress',
        'buyerInvoicePreference' => 'getBuyerInvoicePreference',
        'buyerTaxInformation' => 'getBuyerTaxInformation',
        'fulfillmentInstruction' => 'getFulfillmentInstruction',
        'isISPU' => 'getIsISPU',
        'isAccessPointOrder' => 'getIsAccessPointOrder',
        'marketplaceTaxInfo' => 'getMarketplaceTaxInfo',
        'sellerDisplayName' => 'getSellerDisplayName',
        'shippingAddress' => 'getShippingAddress',
        'buyerInfo' => 'getBuyerInfo',
        'automatedShippingSettings' => 'getAutomatedShippingSettings',
        'hasRegulatedItems' => 'getHasRegulatedItems',
        'electronicInvoiceStatus' => 'getElectronicInvoiceStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ORDER_STATUS_PENDING = 'Pending';
    const ORDER_STATUS_UNSHIPPED = 'Unshipped';
    const ORDER_STATUS_PARTIALLY_SHIPPED = 'PartiallyShipped';
    const ORDER_STATUS_SHIPPED = 'Shipped';
    const ORDER_STATUS_CANCELED = 'Canceled';
    const ORDER_STATUS_UNFULFILLABLE = 'Unfulfillable';
    const ORDER_STATUS_INVOICE_UNCONFIRMED = 'InvoiceUnconfirmed';
    const ORDER_STATUS_PENDING_AVAILABILITY = 'PendingAvailability';
    const FULFILLMENT_CHANNEL_MFN = 'MFN';
    const FULFILLMENT_CHANNEL_AFN = 'AFN';
    const PAYMENT_METHOD_COD = 'COD';
    const PAYMENT_METHOD_CVS = 'CVS';
    const PAYMENT_METHOD_OTHER = 'Other';
    const ORDER_TYPE_STANDARD_ORDER = 'StandardOrder';
    const ORDER_TYPE_LONG_LEAD_TIME_ORDER = 'LongLeadTimeOrder';
    const ORDER_TYPE_PREORDER = 'Preorder';
    const ORDER_TYPE_BACK_ORDER = 'BackOrder';
    const ORDER_TYPE_SOURCING_ON_DEMAND_ORDER = 'SourcingOnDemandOrder';
    const BUYER_INVOICE_PREFERENCE_INDIVIDUAL = 'INDIVIDUAL';
    const BUYER_INVOICE_PREFERENCE_BUSINESS = 'BUSINESS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        return [
            self::ORDER_STATUS_PENDING,
            self::ORDER_STATUS_UNSHIPPED,
            self::ORDER_STATUS_PARTIALLY_SHIPPED,
            self::ORDER_STATUS_SHIPPED,
            self::ORDER_STATUS_CANCELED,
            self::ORDER_STATUS_UNFULFILLABLE,
            self::ORDER_STATUS_INVOICE_UNCONFIRMED,
            self::ORDER_STATUS_PENDING_AVAILABILITY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentChannelAllowableValues()
    {
        return [
            self::FULFILLMENT_CHANNEL_MFN,
            self::FULFILLMENT_CHANNEL_AFN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_COD,
            self::PAYMENT_METHOD_CVS,
            self::PAYMENT_METHOD_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_STANDARD_ORDER,
            self::ORDER_TYPE_LONG_LEAD_TIME_ORDER,
            self::ORDER_TYPE_PREORDER,
            self::ORDER_TYPE_BACK_ORDER,
            self::ORDER_TYPE_SOURCING_ON_DEMAND_ORDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBuyerInvoicePreferenceAllowableValues()
    {
        return [
            self::BUYER_INVOICE_PREFERENCE_INDIVIDUAL,
            self::BUYER_INVOICE_PREFERENCE_BUSINESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amazonOrderId'] = isset($data['amazonOrderId']) ? $data['amazonOrderId'] : null;
        $this->container['sellerOrderId'] = isset($data['sellerOrderId']) ? $data['sellerOrderId'] : null;
        $this->container['purchaseDate'] = isset($data['purchaseDate']) ? $data['purchaseDate'] : null;
        $this->container['lastUpdateDate'] = isset($data['lastUpdateDate']) ? $data['lastUpdateDate'] : null;
        $this->container['orderStatus'] = isset($data['orderStatus']) ? $data['orderStatus'] : null;
        $this->container['fulfillmentChannel'] = isset($data['fulfillmentChannel']) ? $data['fulfillmentChannel'] : null;
        $this->container['salesChannel'] = isset($data['salesChannel']) ? $data['salesChannel'] : null;
        $this->container['orderChannel'] = isset($data['orderChannel']) ? $data['orderChannel'] : null;
        $this->container['shipServiceLevel'] = isset($data['shipServiceLevel']) ? $data['shipServiceLevel'] : null;
        $this->container['orderTotal'] = isset($data['orderTotal']) ? $data['orderTotal'] : null;
        $this->container['numberOfItemsShipped'] = isset($data['numberOfItemsShipped']) ? $data['numberOfItemsShipped'] : null;
        $this->container['numberOfItemsUnshipped'] = isset($data['numberOfItemsUnshipped']) ? $data['numberOfItemsUnshipped'] : null;
        $this->container['paymentExecutionDetail'] = isset($data['paymentExecutionDetail']) ? $data['paymentExecutionDetail'] : null;
        $this->container['paymentMethod'] = isset($data['paymentMethod']) ? $data['paymentMethod'] : null;
        $this->container['paymentMethodDetails'] = isset($data['paymentMethodDetails']) ? $data['paymentMethodDetails'] : null;
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['shipmentServiceLevelCategory'] = isset($data['shipmentServiceLevelCategory']) ? $data['shipmentServiceLevelCategory'] : null;
        $this->container['easyShipShipmentStatus'] = isset($data['easyShipShipmentStatus']) ? $data['easyShipShipmentStatus'] : null;
        $this->container['cbaDisplayableShippingLabel'] = isset($data['cbaDisplayableShippingLabel']) ? $data['cbaDisplayableShippingLabel'] : null;
        $this->container['orderType'] = isset($data['orderType']) ? $data['orderType'] : null;
        $this->container['earliestShipDate'] = isset($data['earliestShipDate']) ? $data['earliestShipDate'] : null;
        $this->container['latestShipDate'] = isset($data['latestShipDate']) ? $data['latestShipDate'] : null;
        $this->container['earliestDeliveryDate'] = isset($data['earliestDeliveryDate']) ? $data['earliestDeliveryDate'] : null;
        $this->container['latestDeliveryDate'] = isset($data['latestDeliveryDate']) ? $data['latestDeliveryDate'] : null;
        $this->container['isBusinessOrder'] = isset($data['isBusinessOrder']) ? $data['isBusinessOrder'] : null;
        $this->container['isPrime'] = isset($data['isPrime']) ? $data['isPrime'] : null;
        $this->container['isPremiumOrder'] = isset($data['isPremiumOrder']) ? $data['isPremiumOrder'] : null;
        $this->container['isGlobalExpressEnabled'] = isset($data['isGlobalExpressEnabled']) ? $data['isGlobalExpressEnabled'] : null;
        $this->container['replacedOrderId'] = isset($data['replacedOrderId']) ? $data['replacedOrderId'] : null;
        $this->container['isReplacementOrder'] = isset($data['isReplacementOrder']) ? $data['isReplacementOrder'] : null;
        $this->container['promiseResponseDueDate'] = isset($data['promiseResponseDueDate']) ? $data['promiseResponseDueDate'] : null;
        $this->container['isEstimatedShipDateSet'] = isset($data['isEstimatedShipDateSet']) ? $data['isEstimatedShipDateSet'] : null;
        $this->container['isSoldByAB'] = isset($data['isSoldByAB']) ? $data['isSoldByAB'] : null;
        $this->container['isIBA'] = isset($data['isIBA']) ? $data['isIBA'] : null;
        $this->container['defaultShipFromLocationAddress'] = isset($data['defaultShipFromLocationAddress']) ? $data['defaultShipFromLocationAddress'] : null;
        $this->container['buyerInvoicePreference'] = isset($data['buyerInvoicePreference']) ? $data['buyerInvoicePreference'] : null;
        $this->container['buyerTaxInformation'] = isset($data['buyerTaxInformation']) ? $data['buyerTaxInformation'] : null;
        $this->container['fulfillmentInstruction'] = isset($data['fulfillmentInstruction']) ? $data['fulfillmentInstruction'] : null;
        $this->container['isISPU'] = isset($data['isISPU']) ? $data['isISPU'] : null;
        $this->container['isAccessPointOrder'] = isset($data['isAccessPointOrder']) ? $data['isAccessPointOrder'] : null;
        $this->container['marketplaceTaxInfo'] = isset($data['marketplaceTaxInfo']) ? $data['marketplaceTaxInfo'] : null;
        $this->container['sellerDisplayName'] = isset($data['sellerDisplayName']) ? $data['sellerDisplayName'] : null;
        $this->container['shippingAddress'] = isset($data['shippingAddress']) ? $data['shippingAddress'] : null;
        $this->container['buyerInfo'] = isset($data['buyerInfo']) ? $data['buyerInfo'] : null;
        $this->container['automatedShippingSettings'] = isset($data['automatedShippingSettings']) ? $data['automatedShippingSettings'] : null;
        $this->container['hasRegulatedItems'] = isset($data['hasRegulatedItems']) ? $data['hasRegulatedItems'] : null;
        $this->container['electronicInvoiceStatus'] = isset($data['electronicInvoiceStatus']) ? $data['electronicInvoiceStatus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amazonOrderId'] === null) {
            $invalidProperties[] = "'amazonOrderId' can't be null";
        }
        if ($this->container['purchaseDate'] === null) {
            $invalidProperties[] = "'purchaseDate' can't be null";
        }
        if ($this->container['lastUpdateDate'] === null) {
            $invalidProperties[] = "'lastUpdateDate' can't be null";
        }
        if ($this->container['orderStatus'] === null) {
            $invalidProperties[] = "'orderStatus' can't be null";
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($this->container['orderStatus']) && !in_array($this->container['orderStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'orderStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFulfillmentChannelAllowableValues();
        if (!is_null($this->container['fulfillmentChannel']) && !in_array($this->container['fulfillmentChannel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fulfillmentChannel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['paymentMethod']) && !in_array($this->container['paymentMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'paymentMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['orderType']) && !in_array($this->container['orderType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'orderType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBuyerInvoicePreferenceAllowableValues();
        if (!is_null($this->container['buyerInvoicePreference']) && !in_array($this->container['buyerInvoicePreference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'buyerInvoicePreference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amazonOrderId
     *
     * @return string
     */
    public function getAmazonOrderId()
    {
        return $this->container['amazonOrderId'];
    }

    /**
     * Sets amazonOrderId
     *
     * @param string $amazonOrderId An Amazon-defined order identifier, in 3-7-7 format.
     *
     * @return $this
     */
    public function setAmazonOrderId($amazonOrderId)
    {
        $this->container['amazonOrderId'] = $amazonOrderId;

        return $this;
    }

    /**
     * Gets sellerOrderId
     *
     * @return string|null
     */
    public function getSellerOrderId()
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId
     *
     * @param string|null $sellerOrderId A seller-defined order identifier.
     *
     * @return $this
     */
    public function setSellerOrderId($sellerOrderId)
    {
        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets purchaseDate
     *
     * @return string
     */
    public function getPurchaseDate()
    {
        return $this->container['purchaseDate'];
    }

    /**
     * Sets purchaseDate
     *
     * @param string $purchaseDate The date when the order was created.
     *
     * @return $this
     */
    public function setPurchaseDate($purchaseDate)
    {
        $this->container['purchaseDate'] = $purchaseDate;

        return $this;
    }

    /**
     * Gets lastUpdateDate
     *
     * @return string
     */
    public function getLastUpdateDate()
    {
        return $this->container['lastUpdateDate'];
    }

    /**
     * Sets lastUpdateDate
     *
     * @param string $lastUpdateDate The date when the order was last updated.  __Note__: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
     *
     * @return $this
     */
    public function setLastUpdateDate($lastUpdateDate)
    {
        $this->container['lastUpdateDate'] = $lastUpdateDate;

        return $this;
    }

    /**
     * Gets orderStatus
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['orderStatus'];
    }

    /**
     * Sets orderStatus
     *
     * @param string $orderStatus The current order status.
     *
     * @return $this
     */
    public function setOrderStatus($orderStatus)
    {
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!in_array($orderStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'orderStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orderStatus'] = $orderStatus;

        return $this;
    }

    /**
     * Gets fulfillmentChannel
     *
     * @return string|null
     */
    public function getFulfillmentChannel()
    {
        return $this->container['fulfillmentChannel'];
    }

    /**
     * Sets fulfillmentChannel
     *
     * @param string|null $fulfillmentChannel Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
     *
     * @return $this
     */
    public function setFulfillmentChannel($fulfillmentChannel)
    {
        $allowedValues = $this->getFulfillmentChannelAllowableValues();
        if (!is_null($fulfillmentChannel) && !in_array($fulfillmentChannel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fulfillmentChannel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfillmentChannel'] = $fulfillmentChannel;

        return $this;
    }

    /**
     * Gets salesChannel
     *
     * @return string|null
     */
    public function getSalesChannel()
    {
        return $this->container['salesChannel'];
    }

    /**
     * Sets salesChannel
     *
     * @param string|null $salesChannel The sales channel of the first item in the order.
     *
     * @return $this
     */
    public function setSalesChannel($salesChannel)
    {
        $this->container['salesChannel'] = $salesChannel;

        return $this;
    }

    /**
     * Gets orderChannel
     *
     * @return string|null
     */
    public function getOrderChannel()
    {
        return $this->container['orderChannel'];
    }

    /**
     * Sets orderChannel
     *
     * @param string|null $orderChannel The order channel of the first item in the order.
     *
     * @return $this
     */
    public function setOrderChannel($orderChannel)
    {
        $this->container['orderChannel'] = $orderChannel;

        return $this;
    }

    /**
     * Gets shipServiceLevel
     *
     * @return string|null
     */
    public function getShipServiceLevel()
    {
        return $this->container['shipServiceLevel'];
    }

    /**
     * Sets shipServiceLevel
     *
     * @param string|null $shipServiceLevel The shipment service level of the order.
     *
     * @return $this
     */
    public function setShipServiceLevel($shipServiceLevel)
    {
        $this->container['shipServiceLevel'] = $shipServiceLevel;

        return $this;
    }

    /**
     * Gets orderTotal
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null
     */
    public function getOrderTotal()
    {
        return $this->container['orderTotal'];
    }

    /**
     * Sets orderTotal
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Money|null $orderTotal orderTotal
     *
     * @return $this
     */
    public function setOrderTotal($orderTotal)
    {
        $this->container['orderTotal'] = $orderTotal;

        return $this;
    }

    /**
     * Gets numberOfItemsShipped
     *
     * @return int|null
     */
    public function getNumberOfItemsShipped()
    {
        return $this->container['numberOfItemsShipped'];
    }

    /**
     * Sets numberOfItemsShipped
     *
     * @param int|null $numberOfItemsShipped The number of items shipped.
     *
     * @return $this
     */
    public function setNumberOfItemsShipped($numberOfItemsShipped)
    {
        $this->container['numberOfItemsShipped'] = $numberOfItemsShipped;

        return $this;
    }

    /**
     * Gets numberOfItemsUnshipped
     *
     * @return int|null
     */
    public function getNumberOfItemsUnshipped()
    {
        return $this->container['numberOfItemsUnshipped'];
    }

    /**
     * Sets numberOfItemsUnshipped
     *
     * @param int|null $numberOfItemsUnshipped The number of items unshipped.
     *
     * @return $this
     */
    public function setNumberOfItemsUnshipped($numberOfItemsUnshipped)
    {
        $this->container['numberOfItemsUnshipped'] = $numberOfItemsUnshipped;

        return $this;
    }

    /**
     * Gets paymentExecutionDetail
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\PaymentExecutionDetailItem[]|null
     */
    public function getPaymentExecutionDetail()
    {
        return $this->container['paymentExecutionDetail'];
    }

    /**
     * Sets paymentExecutionDetail
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\PaymentExecutionDetailItem[]|null $paymentExecutionDetail A list of payment execution detail items.
     *
     * @return $this
     */
    public function setPaymentExecutionDetail($paymentExecutionDetail)
    {
        $this->container['paymentExecutionDetail'] = $paymentExecutionDetail;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
     *
     * @return $this
     */
    public function setPaymentMethod($paymentMethod)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($paymentMethod) && !in_array($paymentMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paymentMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets paymentMethodDetails
     *
     * @return string[]|null
     */
    public function getPaymentMethodDetails()
    {
        return $this->container['paymentMethodDetails'];
    }

    /**
     * Sets paymentMethodDetails
     *
     * @param string[]|null $paymentMethodDetails A list of payment method detail items.
     *
     * @return $this
     */
    public function setPaymentMethodDetails($paymentMethodDetails)
    {
        $this->container['paymentMethodDetails'] = $paymentMethodDetails;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The identifier for the marketplace where the order was placed.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets shipmentServiceLevelCategory
     *
     * @return string|null
     */
    public function getShipmentServiceLevelCategory()
    {
        return $this->container['shipmentServiceLevelCategory'];
    }

    /**
     * Sets shipmentServiceLevelCategory
     *
     * @param string|null $shipmentServiceLevelCategory The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
     *
     * @return $this
     */
    public function setShipmentServiceLevelCategory($shipmentServiceLevelCategory)
    {
        $this->container['shipmentServiceLevelCategory'] = $shipmentServiceLevelCategory;

        return $this;
    }

    /**
     * Gets easyShipShipmentStatus
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\EasyShipShipmentStatus|null
     */
    public function getEasyShipShipmentStatus()
    {
        return $this->container['easyShipShipmentStatus'];
    }

    /**
     * Sets easyShipShipmentStatus
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\EasyShipShipmentStatus|null $easyShipShipmentStatus easyShipShipmentStatus
     *
     * @return $this
     */
    public function setEasyShipShipmentStatus($easyShipShipmentStatus)
    {
        $this->container['easyShipShipmentStatus'] = $easyShipShipmentStatus;

        return $this;
    }

    /**
     * Gets cbaDisplayableShippingLabel
     *
     * @return string|null
     */
    public function getCbaDisplayableShippingLabel()
    {
        return $this->container['cbaDisplayableShippingLabel'];
    }

    /**
     * Sets cbaDisplayableShippingLabel
     *
     * @param string|null $cbaDisplayableShippingLabel Custom ship label for Checkout by Amazon (CBA).
     *
     * @return $this
     */
    public function setCbaDisplayableShippingLabel($cbaDisplayableShippingLabel)
    {
        $this->container['cbaDisplayableShippingLabel'] = $cbaDisplayableShippingLabel;

        return $this;
    }

    /**
     * Gets orderType
     *
     * @return string|null
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType
     *
     * @param string|null $orderType The type of the order.
     *
     * @return $this
     */
    public function setOrderType($orderType)
    {
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($orderType) && !in_array($orderType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'orderType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets earliestShipDate
     *
     * @return string|null
     */
    public function getEarliestShipDate()
    {
        return $this->container['earliestShipDate'];
    }

    /**
     * Sets earliestShipDate
     *
     * @param string|null $earliestShipDate The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  __Note__: EarliestShipDate might not be returned for orders placed before February 1, 2013.
     *
     * @return $this
     */
    public function setEarliestShipDate($earliestShipDate)
    {
        $this->container['earliestShipDate'] = $earliestShipDate;

        return $this;
    }

    /**
     * Gets latestShipDate
     *
     * @return string|null
     */
    public function getLatestShipDate()
    {
        return $this->container['latestShipDate'];
    }

    /**
     * Sets latestShipDate
     *
     * @param string|null $latestShipDate The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  __Note__: LatestShipDate might not be returned for orders placed before February 1, 2013.
     *
     * @return $this
     */
    public function setLatestShipDate($latestShipDate)
    {
        $this->container['latestShipDate'] = $latestShipDate;

        return $this;
    }

    /**
     * Gets earliestDeliveryDate
     *
     * @return string|null
     */
    public function getEarliestDeliveryDate()
    {
        return $this->container['earliestDeliveryDate'];
    }

    /**
     * Sets earliestDeliveryDate
     *
     * @param string|null $earliestDeliveryDate The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
     *
     * @return $this
     */
    public function setEarliestDeliveryDate($earliestDeliveryDate)
    {
        $this->container['earliestDeliveryDate'] = $earliestDeliveryDate;

        return $this;
    }

    /**
     * Gets latestDeliveryDate
     *
     * @return string|null
     */
    public function getLatestDeliveryDate()
    {
        return $this->container['latestDeliveryDate'];
    }

    /**
     * Sets latestDeliveryDate
     *
     * @param string|null $latestDeliveryDate The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
     *
     * @return $this
     */
    public function setLatestDeliveryDate($latestDeliveryDate)
    {
        $this->container['latestDeliveryDate'] = $latestDeliveryDate;

        return $this;
    }

    /**
     * Gets isBusinessOrder
     *
     * @return bool|null
     */
    public function getIsBusinessOrder()
    {
        return $this->container['isBusinessOrder'];
    }

    /**
     * Sets isBusinessOrder
     *
     * @param bool|null $isBusinessOrder When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
     *
     * @return $this
     */
    public function setIsBusinessOrder($isBusinessOrder)
    {
        $this->container['isBusinessOrder'] = $isBusinessOrder;

        return $this;
    }

    /**
     * Gets isPrime
     *
     * @return bool|null
     */
    public function getIsPrime()
    {
        return $this->container['isPrime'];
    }

    /**
     * Sets isPrime
     *
     * @param bool|null $isPrime When true, the order is a seller-fulfilled Amazon Prime order.
     *
     * @return $this
     */
    public function setIsPrime($isPrime)
    {
        $this->container['isPrime'] = $isPrime;

        return $this;
    }

    /**
     * Gets isPremiumOrder
     *
     * @return bool|null
     */
    public function getIsPremiumOrder()
    {
        return $this->container['isPremiumOrder'];
    }

    /**
     * Sets isPremiumOrder
     *
     * @param bool|null $isPremiumOrder When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see \"Premium Shipping Options\" in the Seller Central Help for your marketplace.
     *
     * @return $this
     */
    public function setIsPremiumOrder($isPremiumOrder)
    {
        $this->container['isPremiumOrder'] = $isPremiumOrder;

        return $this;
    }

    /**
     * Gets isGlobalExpressEnabled
     *
     * @return bool|null
     */
    public function getIsGlobalExpressEnabled()
    {
        return $this->container['isGlobalExpressEnabled'];
    }

    /**
     * Sets isGlobalExpressEnabled
     *
     * @param bool|null $isGlobalExpressEnabled When true, the order is a GlobalExpress order.
     *
     * @return $this
     */
    public function setIsGlobalExpressEnabled($isGlobalExpressEnabled)
    {
        $this->container['isGlobalExpressEnabled'] = $isGlobalExpressEnabled;

        return $this;
    }

    /**
     * Gets replacedOrderId
     *
     * @return string|null
     */
    public function getReplacedOrderId()
    {
        return $this->container['replacedOrderId'];
    }

    /**
     * Sets replacedOrderId
     *
     * @param string|null $replacedOrderId The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
     *
     * @return $this
     */
    public function setReplacedOrderId($replacedOrderId)
    {
        $this->container['replacedOrderId'] = $replacedOrderId;

        return $this;
    }

    /**
     * Gets isReplacementOrder
     *
     * @return bool|null
     */
    public function getIsReplacementOrder()
    {
        return $this->container['isReplacementOrder'];
    }

    /**
     * Sets isReplacementOrder
     *
     * @param bool|null $isReplacementOrder When true, this is a replacement order.
     *
     * @return $this
     */
    public function setIsReplacementOrder($isReplacementOrder)
    {
        $this->container['isReplacementOrder'] = $isReplacementOrder;

        return $this;
    }

    /**
     * Gets promiseResponseDueDate
     *
     * @return string|null
     */
    public function getPromiseResponseDueDate()
    {
        return $this->container['promiseResponseDueDate'];
    }

    /**
     * Sets promiseResponseDueDate
     *
     * @param string|null $promiseResponseDueDate Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders.
     *
     * @return $this
     */
    public function setPromiseResponseDueDate($promiseResponseDueDate)
    {
        $this->container['promiseResponseDueDate'] = $promiseResponseDueDate;

        return $this;
    }

    /**
     * Gets isEstimatedShipDateSet
     *
     * @return bool|null
     */
    public function getIsEstimatedShipDateSet()
    {
        return $this->container['isEstimatedShipDateSet'];
    }

    /**
     * Sets isEstimatedShipDateSet
     *
     * @param bool|null $isEstimatedShipDateSet When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
     *
     * @return $this
     */
    public function setIsEstimatedShipDateSet($isEstimatedShipDateSet)
    {
        $this->container['isEstimatedShipDateSet'] = $isEstimatedShipDateSet;

        return $this;
    }

    /**
     * Gets isSoldByAB
     *
     * @return bool|null
     */
    public function getIsSoldByAB()
    {
        return $this->container['isSoldByAB'];
    }

    /**
     * Sets isSoldByAB
     *
     * @param bool|null $isSoldByAB When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
     *
     * @return $this
     */
    public function setIsSoldByAB($isSoldByAB)
    {
        $this->container['isSoldByAB'] = $isSoldByAB;

        return $this;
    }

    /**
     * Gets isIBA
     *
     * @return bool|null
     */
    public function getIsIBA()
    {
        return $this->container['isIBA'];
    }

    /**
     * Sets isIBA
     *
     * @param bool|null $isIBA When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
     *
     * @return $this
     */
    public function setIsIBA($isIBA)
    {
        $this->container['isIBA'] = $isIBA;

        return $this;
    }

    /**
     * Gets defaultShipFromLocationAddress
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Address|null
     */
    public function getDefaultShipFromLocationAddress()
    {
        return $this->container['defaultShipFromLocationAddress'];
    }

    /**
     * Sets defaultShipFromLocationAddress
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Address|null $defaultShipFromLocationAddress defaultShipFromLocationAddress
     *
     * @return $this
     */
    public function setDefaultShipFromLocationAddress($defaultShipFromLocationAddress)
    {
        $this->container['defaultShipFromLocationAddress'] = $defaultShipFromLocationAddress;

        return $this;
    }

    /**
     * Gets buyerInvoicePreference
     *
     * @return string|null
     */
    public function getBuyerInvoicePreference()
    {
        return $this->container['buyerInvoicePreference'];
    }

    /**
     * Sets buyerInvoicePreference
     *
     * @param string|null $buyerInvoicePreference The buyer's invoicing preference. Available only in the TR marketplace.
     *
     * @return $this
     */
    public function setBuyerInvoicePreference($buyerInvoicePreference)
    {
        $allowedValues = $this->getBuyerInvoicePreferenceAllowableValues();
        if (!is_null($buyerInvoicePreference) && !in_array($buyerInvoicePreference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'buyerInvoicePreference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['buyerInvoicePreference'] = $buyerInvoicePreference;

        return $this;
    }

    /**
     * Gets buyerTaxInformation
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerTaxInformation|null
     */
    public function getBuyerTaxInformation()
    {
        return $this->container['buyerTaxInformation'];
    }

    /**
     * Sets buyerTaxInformation
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerTaxInformation|null $buyerTaxInformation buyerTaxInformation
     *
     * @return $this
     */
    public function setBuyerTaxInformation($buyerTaxInformation)
    {
        $this->container['buyerTaxInformation'] = $buyerTaxInformation;

        return $this;
    }

    /**
     * Gets fulfillmentInstruction
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\FulfillmentInstruction|null
     */
    public function getFulfillmentInstruction()
    {
        return $this->container['fulfillmentInstruction'];
    }

    /**
     * Sets fulfillmentInstruction
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\FulfillmentInstruction|null $fulfillmentInstruction fulfillmentInstruction
     *
     * @return $this
     */
    public function setFulfillmentInstruction($fulfillmentInstruction)
    {
        $this->container['fulfillmentInstruction'] = $fulfillmentInstruction;

        return $this;
    }

    /**
     * Gets isISPU
     *
     * @return bool|null
     */
    public function getIsISPU()
    {
        return $this->container['isISPU'];
    }

    /**
     * Sets isISPU
     *
     * @param bool|null $isISPU When true, this order is marked to be picked up from a store rather than delivered.
     *
     * @return $this
     */
    public function setIsISPU($isISPU)
    {
        $this->container['isISPU'] = $isISPU;

        return $this;
    }

    /**
     * Gets isAccessPointOrder
     *
     * @return bool|null
     */
    public function getIsAccessPointOrder()
    {
        return $this->container['isAccessPointOrder'];
    }

    /**
     * Sets isAccessPointOrder
     *
     * @param bool|null $isAccessPointOrder When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.
     *
     * @return $this
     */
    public function setIsAccessPointOrder($isAccessPointOrder)
    {
        $this->container['isAccessPointOrder'] = $isAccessPointOrder;

        return $this;
    }

    /**
     * Gets marketplaceTaxInfo
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\MarketplaceTaxInfo|null
     */
    public function getMarketplaceTaxInfo()
    {
        return $this->container['marketplaceTaxInfo'];
    }

    /**
     * Sets marketplaceTaxInfo
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\MarketplaceTaxInfo|null $marketplaceTaxInfo marketplaceTaxInfo
     *
     * @return $this
     */
    public function setMarketplaceTaxInfo($marketplaceTaxInfo)
    {
        $this->container['marketplaceTaxInfo'] = $marketplaceTaxInfo;

        return $this;
    }

    /**
     * Gets sellerDisplayName
     *
     * @return string|null
     */
    public function getSellerDisplayName()
    {
        return $this->container['sellerDisplayName'];
    }

    /**
     * Sets sellerDisplayName
     *
     * @param string|null $sellerDisplayName The seller’s friendly name registered in the marketplace.
     *
     * @return $this
     */
    public function setSellerDisplayName($sellerDisplayName)
    {
        $this->container['sellerDisplayName'] = $sellerDisplayName;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\Address|null $shippingAddress shippingAddress
     *
     * @return $this
     */
    public function setShippingAddress($shippingAddress)
    {
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }

    /**
     * Gets buyerInfo
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerInfo|null
     */
    public function getBuyerInfo()
    {
        return $this->container['buyerInfo'];
    }

    /**
     * Sets buyerInfo
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\BuyerInfo|null $buyerInfo buyerInfo
     *
     * @return $this
     */
    public function setBuyerInfo($buyerInfo)
    {
        $this->container['buyerInfo'] = $buyerInfo;

        return $this;
    }

    /**
     * Gets automatedShippingSettings
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\AutomatedShippingSettings|null
     */
    public function getAutomatedShippingSettings()
    {
        return $this->container['automatedShippingSettings'];
    }

    /**
     * Sets automatedShippingSettings
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\AutomatedShippingSettings|null $automatedShippingSettings automatedShippingSettings
     *
     * @return $this
     */
    public function setAutomatedShippingSettings($automatedShippingSettings)
    {
        $this->container['automatedShippingSettings'] = $automatedShippingSettings;

        return $this;
    }

    /**
     * Gets hasRegulatedItems
     *
     * @return bool|null
     */
    public function getHasRegulatedItems()
    {
        return $this->container['hasRegulatedItems'];
    }

    /**
     * Sets hasRegulatedItems
     *
     * @param bool|null $hasRegulatedItems Whether the order contains regulated items which may require additional approval steps before being fulfilled.
     *
     * @return $this
     */
    public function setHasRegulatedItems($hasRegulatedItems)
    {
        $this->container['hasRegulatedItems'] = $hasRegulatedItems;

        return $this;
    }

    /**
     * Gets electronicInvoiceStatus
     *
     * @return \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ElectronicInvoiceStatus|null
     */
    public function getElectronicInvoiceStatus()
    {
        return $this->container['electronicInvoiceStatus'];
    }

    /**
     * Sets electronicInvoiceStatus
     *
     * @param \Glue\SpApi\OpenAPI\Clients\OrdersV0\Model\ElectronicInvoiceStatus|null $electronicInvoiceStatus electronicInvoiceStatus
     *
     * @return $this
     */
    public function setElectronicInvoiceStatus($electronicInvoiceStatus)
    {
        $this->container['electronicInvoiceStatus'] = $electronicInvoiceStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


