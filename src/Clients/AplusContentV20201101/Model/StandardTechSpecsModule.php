<?php
/**
 * StandardTechSpecsModule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\AplusContentV20201101
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ObjectSerializer;

/**
 * StandardTechSpecsModule Class Doc Comment
 *
 * @category Class
 * @description The standard table of technical feature names and definitions.
 * @package  Glue\SpApi\OpenAPI\Clients\AplusContentV20201101
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StandardTechSpecsModule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StandardTechSpecsModule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'headline' => '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\TextComponent',
        'specificationList' => '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\StandardTextPairBlock[]',
        'tableCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'headline' => null,
        'specificationList' => null,
        'tableCount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'headline' => 'headline',
        'specificationList' => 'specificationList',
        'tableCount' => 'tableCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'headline' => 'setHeadline',
        'specificationList' => 'setSpecificationList',
        'tableCount' => 'setTableCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'headline' => 'getHeadline',
        'specificationList' => 'getSpecificationList',
        'tableCount' => 'getTableCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['headline'] = isset($data['headline']) ? $data['headline'] : null;
        $this->container['specificationList'] = isset($data['specificationList']) ? $data['specificationList'] : null;
        $this->container['tableCount'] = isset($data['tableCount']) ? $data['tableCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['specificationList'] === null) {
            $invalidProperties[] = "'specificationList' can't be null";
        }
        if (!is_null($this->container['tableCount']) && ($this->container['tableCount'] > 2)) {
            $invalidProperties[] = "invalid value for 'tableCount', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['tableCount']) && ($this->container['tableCount'] < 1)) {
            $invalidProperties[] = "invalid value for 'tableCount', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets headline
     *
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\TextComponent|null
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\TextComponent|null $headline headline
     *
     * @return $this
     */
    public function setHeadline($headline)
    {
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets specificationList
     *
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\StandardTextPairBlock[]
     */
    public function getSpecificationList()
    {
        return $this->container['specificationList'];
    }

    /**
     * Sets specificationList
     *
     * @param \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\StandardTextPairBlock[] $specificationList The specification list.
     *
     * @return $this
     */
    public function setSpecificationList($specificationList)
    {
        $this->container['specificationList'] = $specificationList;

        return $this;
    }

    /**
     * Gets tableCount
     *
     * @return int|null
     */
    public function getTableCount()
    {
        return $this->container['tableCount'];
    }

    /**
     * Sets tableCount
     *
     * @param int|null $tableCount The number of tables to present. Features are evenly divided between the tables.
     *
     * @return $this
     */
    public function setTableCount($tableCount)
    {

        if (!is_null($tableCount) && ($tableCount > 2)) {
            throw new \InvalidArgumentException('invalid value for $tableCount when calling StandardTechSpecsModule., must be smaller than or equal to 2.');
        }
        if (!is_null($tableCount) && ($tableCount < 1)) {
            throw new \InvalidArgumentException('invalid value for $tableCount when calling StandardTechSpecsModule., must be bigger than or equal to 1.');
        }

        $this->container['tableCount'] = $tableCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


