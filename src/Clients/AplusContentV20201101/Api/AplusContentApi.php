<?php
/**
 * AplusContentApi
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\AplusContentV20201101
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException;
use Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Configuration;
use Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\HeaderSelector;
use Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ObjectSerializer;

/**
 * AplusContentApi Class Doc Comment
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\AplusContentV20201101
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AplusContentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createContentDocument
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function createContentDocument($marketplaceId, $postContentDocumentRequest)
    {
        list($response) = $this->createContentDocumentWithHttpInfo($marketplaceId, $postContentDocumentRequest);
        return $response;
    }

    /**
     * Operation createContentDocumentWithHttpInfo
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContentDocumentWithHttpInfo($marketplaceId, $postContentDocumentRequest)
    {
        $request = $this->createContentDocumentRequest($marketplaceId, $postContentDocumentRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContentDocumentAsync
     *
     * 
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContentDocumentAsync($marketplaceId, $postContentDocumentRequest)
    {
        return $this->createContentDocumentAsyncWithHttpInfo($marketplaceId, $postContentDocumentRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createContentDocumentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContentDocumentAsyncWithHttpInfo($marketplaceId, $postContentDocumentRequest)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse';
        $request = $this->createContentDocumentRequest($marketplaceId, $postContentDocumentRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createContentDocument'
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createContentDocumentRequest($marketplaceId, $postContentDocumentRequest)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling createContentDocument'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.createContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postContentDocumentRequest' is set
        if ($postContentDocumentRequest === null || (is_array($postContentDocumentRequest) && count($postContentDocumentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postContentDocumentRequest when calling createContentDocument'
            );
        }

        $resourcePath = '/aplus/2020-11-01/contentDocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }


        // body params
        $_tempBody = null;
        if (isset($postContentDocumentRequest)) {
            $_tempBody = $postContentDocumentRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentDocument
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\GetContentDocumentResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function getContentDocument($contentReferenceKey, $marketplaceId, $includedDataSet)
    {
        list($response) = $this->getContentDocumentWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet);
        return $response;
    }

    /**
     * Operation getContentDocumentWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\GetContentDocumentResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentDocumentWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet)
    {
        $request = $this->getContentDocumentRequest($contentReferenceKey, $marketplaceId, $includedDataSet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\GetContentDocumentResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\GetContentDocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\GetContentDocumentResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\GetContentDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentDocumentAsync
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentDocumentAsync($contentReferenceKey, $marketplaceId, $includedDataSet)
    {
        return $this->getContentDocumentAsyncWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentDocumentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentDocumentAsyncWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\GetContentDocumentResponse';
        $request = $this->getContentDocumentRequest($contentReferenceKey, $marketplaceId, $includedDataSet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentDocument'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentDocumentRequest($contentReferenceKey, $marketplaceId, $includedDataSet)
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling getContentDocument'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new \InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.getContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling getContentDocument'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.getContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'includedDataSet' is set
        if ($includedDataSet === null || (is_array($includedDataSet) && count($includedDataSet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $includedDataSet when calling getContentDocument'
            );
        }
        if (count($includedDataSet) < 1) {
            throw new \InvalidArgumentException('invalid value for "$includedDataSet" when calling AplusContentApi.getContentDocument, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }
        // query params
        if (is_array($includedDataSet)) {
            $includedDataSet = ObjectSerializer::serializeCollection($includedDataSet, 'csv', true);
        }
        if ($includedDataSet !== null) {
            $queryParams['includedDataSet'] = ObjectSerializer::toQueryValue($includedDataSet);
        }

        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listContentDocumentAsinRelations
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param  string[] $asinSet The set of ASINs. (optional)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ListContentDocumentAsinRelationsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function listContentDocumentAsinRelations($contentReferenceKey, $marketplaceId, $includedDataSet = null, $asinSet = null, $pageToken = null)
    {
        list($response) = $this->listContentDocumentAsinRelationsWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet, $asinSet, $pageToken);
        return $response;
    }

    /**
     * Operation listContentDocumentAsinRelationsWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param  string[] $asinSet The set of ASINs. (optional)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ListContentDocumentAsinRelationsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listContentDocumentAsinRelationsWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet = null, $asinSet = null, $pageToken = null)
    {
        $request = $this->listContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $includedDataSet, $asinSet, $pageToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ListContentDocumentAsinRelationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ListContentDocumentAsinRelationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ListContentDocumentAsinRelationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ListContentDocumentAsinRelationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listContentDocumentAsinRelationsAsync
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param  string[] $asinSet The set of ASINs. (optional)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContentDocumentAsinRelationsAsync($contentReferenceKey, $marketplaceId, $includedDataSet = null, $asinSet = null, $pageToken = null)
    {
        return $this->listContentDocumentAsinRelationsAsyncWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet, $asinSet, $pageToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listContentDocumentAsinRelationsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param  string[] $asinSet The set of ASINs. (optional)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listContentDocumentAsinRelationsAsyncWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet = null, $asinSet = null, $pageToken = null)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ListContentDocumentAsinRelationsResponse';
        $request = $this->listContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $includedDataSet, $asinSet, $pageToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listContentDocumentAsinRelations'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param  string[] $asinSet The set of ASINs. (optional)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $includedDataSet = null, $asinSet = null, $pageToken = null)
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling listContentDocumentAsinRelations'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new \InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.listContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling listContentDocumentAsinRelations'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.listContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        if ($includedDataSet !== null && count($includedDataSet) < 0) {
            throw new \InvalidArgumentException('invalid value for "$includedDataSet" when calling AplusContentApi.listContentDocumentAsinRelations, number of items must be greater than or equal to 0.');
        }

        if ($pageToken !== null && strlen($pageToken) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pageToken" when calling AplusContentApi.listContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }
        // query params
        if (is_array($includedDataSet)) {
            $includedDataSet = ObjectSerializer::serializeCollection($includedDataSet, 'csv', true);
        }
        if ($includedDataSet !== null) {
            $queryParams['includedDataSet'] = ObjectSerializer::toQueryValue($includedDataSet);
        }
        // query params
        if (is_array($asinSet)) {
            $asinSet = ObjectSerializer::serializeCollection($asinSet, 'csv', true);
        }
        if ($asinSet !== null) {
            $queryParams['asinSet'] = ObjectSerializer::toQueryValue($asinSet);
        }
        // query params
        if ($pageToken !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($pageToken);
        }

        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentDocumentApprovalSubmission
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentApprovalSubmissionResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function postContentDocumentApprovalSubmission($contentReferenceKey, $marketplaceId)
    {
        list($response) = $this->postContentDocumentApprovalSubmissionWithHttpInfo($contentReferenceKey, $marketplaceId);
        return $response;
    }

    /**
     * Operation postContentDocumentApprovalSubmissionWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentApprovalSubmissionResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentDocumentApprovalSubmissionWithHttpInfo($contentReferenceKey, $marketplaceId)
    {
        $request = $this->postContentDocumentApprovalSubmissionRequest($contentReferenceKey, $marketplaceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentApprovalSubmissionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentApprovalSubmissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentApprovalSubmissionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentApprovalSubmissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentDocumentApprovalSubmissionAsync
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentDocumentApprovalSubmissionAsync($contentReferenceKey, $marketplaceId)
    {
        return $this->postContentDocumentApprovalSubmissionAsyncWithHttpInfo($contentReferenceKey, $marketplaceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentDocumentApprovalSubmissionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentDocumentApprovalSubmissionAsyncWithHttpInfo($contentReferenceKey, $marketplaceId)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentApprovalSubmissionResponse';
        $request = $this->postContentDocumentApprovalSubmissionRequest($contentReferenceKey, $marketplaceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentDocumentApprovalSubmission'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentDocumentApprovalSubmissionRequest($contentReferenceKey, $marketplaceId)
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling postContentDocumentApprovalSubmission'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new \InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.postContentDocumentApprovalSubmission, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling postContentDocumentApprovalSubmission'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.postContentDocumentApprovalSubmission, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }

        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentDocumentAsinRelations
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsRequest $postContentDocumentAsinRelationsRequest The content document ASIN relations request details. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function postContentDocumentAsinRelations($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest)
    {
        list($response) = $this->postContentDocumentAsinRelationsWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest);
        return $response;
    }

    /**
     * Operation postContentDocumentAsinRelationsWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsRequest $postContentDocumentAsinRelationsRequest The content document ASIN relations request details. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentDocumentAsinRelationsWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest)
    {
        $request = $this->postContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentDocumentAsinRelationsAsync
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsRequest $postContentDocumentAsinRelationsRequest The content document ASIN relations request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentDocumentAsinRelationsAsync($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest)
    {
        return $this->postContentDocumentAsinRelationsAsyncWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentDocumentAsinRelationsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsRequest $postContentDocumentAsinRelationsRequest The content document ASIN relations request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentDocumentAsinRelationsAsyncWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsResponse';
        $request = $this->postContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentDocumentAsinRelations'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentAsinRelationsRequest $postContentDocumentAsinRelationsRequest The content document ASIN relations request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest)
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling postContentDocumentAsinRelations'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new \InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.postContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling postContentDocumentAsinRelations'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.postContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postContentDocumentAsinRelationsRequest' is set
        if ($postContentDocumentAsinRelationsRequest === null || (is_array($postContentDocumentAsinRelationsRequest) && count($postContentDocumentAsinRelationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postContentDocumentAsinRelationsRequest when calling postContentDocumentAsinRelations'
            );
        }

        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }

        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($postContentDocumentAsinRelationsRequest)) {
            $_tempBody = $postContentDocumentAsinRelationsRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentDocumentSuspendSubmission
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentSuspendSubmissionResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function postContentDocumentSuspendSubmission($contentReferenceKey, $marketplaceId)
    {
        list($response) = $this->postContentDocumentSuspendSubmissionWithHttpInfo($contentReferenceKey, $marketplaceId);
        return $response;
    }

    /**
     * Operation postContentDocumentSuspendSubmissionWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentSuspendSubmissionResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentDocumentSuspendSubmissionWithHttpInfo($contentReferenceKey, $marketplaceId)
    {
        $request = $this->postContentDocumentSuspendSubmissionRequest($contentReferenceKey, $marketplaceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentSuspendSubmissionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentSuspendSubmissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentSuspendSubmissionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentSuspendSubmissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentDocumentSuspendSubmissionAsync
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentDocumentSuspendSubmissionAsync($contentReferenceKey, $marketplaceId)
    {
        return $this->postContentDocumentSuspendSubmissionAsyncWithHttpInfo($contentReferenceKey, $marketplaceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentDocumentSuspendSubmissionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentDocumentSuspendSubmissionAsyncWithHttpInfo($contentReferenceKey, $marketplaceId)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentSuspendSubmissionResponse';
        $request = $this->postContentDocumentSuspendSubmissionRequest($contentReferenceKey, $marketplaceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentDocumentSuspendSubmission'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentDocumentSuspendSubmissionRequest($contentReferenceKey, $marketplaceId)
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling postContentDocumentSuspendSubmission'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new \InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.postContentDocumentSuspendSubmission, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling postContentDocumentSuspendSubmission'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.postContentDocumentSuspendSubmission, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }

        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchContentDocuments
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentDocumentsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function searchContentDocuments($marketplaceId, $pageToken = null)
    {
        list($response) = $this->searchContentDocumentsWithHttpInfo($marketplaceId, $pageToken);
        return $response;
    }

    /**
     * Operation searchContentDocumentsWithHttpInfo
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentDocumentsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchContentDocumentsWithHttpInfo($marketplaceId, $pageToken = null)
    {
        $request = $this->searchContentDocumentsRequest($marketplaceId, $pageToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentDocumentsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentDocumentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentDocumentsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentDocumentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchContentDocumentsAsync
     *
     * 
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchContentDocumentsAsync($marketplaceId, $pageToken = null)
    {
        return $this->searchContentDocumentsAsyncWithHttpInfo($marketplaceId, $pageToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchContentDocumentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchContentDocumentsAsyncWithHttpInfo($marketplaceId, $pageToken = null)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentDocumentsResponse';
        $request = $this->searchContentDocumentsRequest($marketplaceId, $pageToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchContentDocuments'
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchContentDocumentsRequest($marketplaceId, $pageToken = null)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling searchContentDocuments'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.searchContentDocuments, must be bigger than or equal to 1.');
        }

        if ($pageToken !== null && strlen($pageToken) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pageToken" when calling AplusContentApi.searchContentDocuments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }
        // query params
        if ($pageToken !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($pageToken);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchContentPublishRecords
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $asin The Amazon Standard Identification Number (ASIN). (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentPublishRecordsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function searchContentPublishRecords($marketplaceId, $asin, $pageToken = null)
    {
        list($response) = $this->searchContentPublishRecordsWithHttpInfo($marketplaceId, $asin, $pageToken);
        return $response;
    }

    /**
     * Operation searchContentPublishRecordsWithHttpInfo
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $asin The Amazon Standard Identification Number (ASIN). (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentPublishRecordsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchContentPublishRecordsWithHttpInfo($marketplaceId, $asin, $pageToken = null)
    {
        $request = $this->searchContentPublishRecordsRequest($marketplaceId, $asin, $pageToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentPublishRecordsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentPublishRecordsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentPublishRecordsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentPublishRecordsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchContentPublishRecordsAsync
     *
     * 
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $asin The Amazon Standard Identification Number (ASIN). (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchContentPublishRecordsAsync($marketplaceId, $asin, $pageToken = null)
    {
        return $this->searchContentPublishRecordsAsyncWithHttpInfo($marketplaceId, $asin, $pageToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchContentPublishRecordsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $asin The Amazon Standard Identification Number (ASIN). (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchContentPublishRecordsAsyncWithHttpInfo($marketplaceId, $asin, $pageToken = null)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\SearchContentPublishRecordsResponse';
        $request = $this->searchContentPublishRecordsRequest($marketplaceId, $asin, $pageToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchContentPublishRecords'
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $asin The Amazon Standard Identification Number (ASIN). (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchContentPublishRecordsRequest($marketplaceId, $asin, $pageToken = null)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling searchContentPublishRecords'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.searchContentPublishRecords, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'asin' is set
        if ($asin === null || (is_array($asin) && count($asin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asin when calling searchContentPublishRecords'
            );
        }
        if (strlen($asin) < 10) {
            throw new \InvalidArgumentException('invalid length for "$asin" when calling AplusContentApi.searchContentPublishRecords, must be bigger than or equal to 10.');
        }

        if ($pageToken !== null && strlen($pageToken) < 1) {
            throw new \InvalidArgumentException('invalid length for "$pageToken" when calling AplusContentApi.searchContentPublishRecords, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentPublishRecords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }
        // query params
        if ($asin !== null) {
            $queryParams['asin'] = ObjectSerializer::toQueryValue($asin);
        }
        // query params
        if ($pageToken !== null) {
            $queryParams['pageToken'] = ObjectSerializer::toQueryValue($pageToken);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateContentDocument
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function updateContentDocument($contentReferenceKey, $marketplaceId, $postContentDocumentRequest)
    {
        list($response) = $this->updateContentDocumentWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentRequest);
        return $response;
    }

    /**
     * Operation updateContentDocumentWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateContentDocumentWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentRequest)
    {
        $request = $this->updateContentDocumentRequest($contentReferenceKey, $marketplaceId, $postContentDocumentRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateContentDocumentAsync
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContentDocumentAsync($contentReferenceKey, $marketplaceId, $postContentDocumentRequest)
    {
        return $this->updateContentDocumentAsyncWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateContentDocumentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateContentDocumentAsyncWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentRequest)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentResponse';
        $request = $this->updateContentDocumentRequest($contentReferenceKey, $marketplaceId, $postContentDocumentRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateContentDocument'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateContentDocumentRequest($contentReferenceKey, $marketplaceId, $postContentDocumentRequest)
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling updateContentDocument'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new \InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.updateContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling updateContentDocument'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.updateContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postContentDocumentRequest' is set
        if ($postContentDocumentRequest === null || (is_array($postContentDocumentRequest) && count($postContentDocumentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postContentDocumentRequest when calling updateContentDocument'
            );
        }

        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }

        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($postContentDocumentRequest)) {
            $_tempBody = $postContentDocumentRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateContentDocumentAsinRelations
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     * @param  string[] $asinSet The set of ASINs. (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ValidateContentDocumentAsinRelationsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList
     */
    public function validateContentDocumentAsinRelations($marketplaceId, $postContentDocumentRequest, $asinSet = null)
    {
        list($response) = $this->validateContentDocumentAsinRelationsWithHttpInfo($marketplaceId, $postContentDocumentRequest, $asinSet);
        return $response;
    }

    /**
     * Operation validateContentDocumentAsinRelationsWithHttpInfo
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     * @param  string[] $asinSet The set of ASINs. (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ValidateContentDocumentAsinRelationsResponse|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateContentDocumentAsinRelationsWithHttpInfo($marketplaceId, $postContentDocumentRequest, $asinSet = null)
    {
        $request = $this->validateContentDocumentAsinRelationsRequest($marketplaceId, $postContentDocumentRequest, $asinSet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ValidateContentDocumentAsinRelationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ValidateContentDocumentAsinRelationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ValidateContentDocumentAsinRelationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ValidateContentDocumentAsinRelationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateContentDocumentAsinRelationsAsync
     *
     * 
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     * @param  string[] $asinSet The set of ASINs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateContentDocumentAsinRelationsAsync($marketplaceId, $postContentDocumentRequest, $asinSet = null)
    {
        return $this->validateContentDocumentAsinRelationsAsyncWithHttpInfo($marketplaceId, $postContentDocumentRequest, $asinSet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateContentDocumentAsinRelationsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     * @param  string[] $asinSet The set of ASINs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateContentDocumentAsinRelationsAsyncWithHttpInfo($marketplaceId, $postContentDocumentRequest, $asinSet = null)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\ValidateContentDocumentAsinRelationsResponse';
        $request = $this->validateContentDocumentAsinRelationsRequest($marketplaceId, $postContentDocumentRequest, $asinSet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateContentDocumentAsinRelations'
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\AplusContentV20201101\Model\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     * @param  string[] $asinSet The set of ASINs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateContentDocumentAsinRelationsRequest($marketplaceId, $postContentDocumentRequest, $asinSet = null)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling validateContentDocumentAsinRelations'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.validateContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postContentDocumentRequest' is set
        if ($postContentDocumentRequest === null || (is_array($postContentDocumentRequest) && count($postContentDocumentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postContentDocumentRequest when calling validateContentDocumentAsinRelations'
            );
        }

        $resourcePath = '/aplus/2020-11-01/contentAsinValidations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplaceId);
        }
        // query params
        if (is_array($asinSet)) {
            $asinSet = ObjectSerializer::serializeCollection($asinSet, 'csv', true);
        }
        if ($asinSet !== null) {
            $queryParams['asinSet'] = ObjectSerializer::toQueryValue($asinSet);
        }


        // body params
        $_tempBody = null;
        if (isset($postContentDocumentRequest)) {
            $_tempBody = $postContentDocumentRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
