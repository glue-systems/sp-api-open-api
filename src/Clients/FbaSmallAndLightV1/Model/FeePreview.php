<?php
/**
 * FeePreview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for FBA Small And Light
 *
 * The Selling Partner API for FBA Small and Light lets you help sellers manage their listings in the Small and Light program. The program reduces the cost of fulfilling orders for small and lightweight FBA inventory. You can enroll or remove items from the program and check item eligibility and enrollment status. You can also preview the estimated program fees charged to a seller for items sold while enrolled in the program.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\ObjectSerializer;

/**
 * FeePreview Class Doc Comment
 *
 * @category Class
 * @description The fee estimate for a specific item.
 * @package  Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FeePreview implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeePreview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asin' => 'string',
        'price' => '\Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\MoneyType',
        'feeBreakdown' => '\Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\FeeLineItem[]',
        'totalFees' => '\Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\MoneyType',
        'errors' => '\Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\Error[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'asin' => null,
        'price' => null,
        'feeBreakdown' => null,
        'totalFees' => null,
        'errors' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asin' => 'asin',
        'price' => 'price',
        'feeBreakdown' => 'feeBreakdown',
        'totalFees' => 'totalFees',
        'errors' => 'errors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asin' => 'setAsin',
        'price' => 'setPrice',
        'feeBreakdown' => 'setFeeBreakdown',
        'totalFees' => 'setTotalFees',
        'errors' => 'setErrors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asin' => 'getAsin',
        'price' => 'getPrice',
        'feeBreakdown' => 'getFeeBreakdown',
        'totalFees' => 'getTotalFees',
        'errors' => 'getErrors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['feeBreakdown'] = isset($data['feeBreakdown']) ? $data['feeBreakdown'] : null;
        $this->container['totalFees'] = isset($data['totalFees']) ? $data['totalFees'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asin
     *
     * @return string|null
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string|null $asin The Amazon Standard Identification Number (ASIN) value used to identify the item.
     *
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\MoneyType|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\MoneyType|null $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets feeBreakdown
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\FeeLineItem[]|null
     */
    public function getFeeBreakdown()
    {
        return $this->container['feeBreakdown'];
    }

    /**
     * Sets feeBreakdown
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\FeeLineItem[]|null $feeBreakdown A list of the Small and Light fees for the item.
     *
     * @return $this
     */
    public function setFeeBreakdown($feeBreakdown)
    {
        $this->container['feeBreakdown'] = $feeBreakdown;

        return $this;
    }

    /**
     * Gets totalFees
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\MoneyType|null
     */
    public function getTotalFees()
    {
        return $this->container['totalFees'];
    }

    /**
     * Sets totalFees
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\MoneyType|null $totalFees totalFees
     *
     * @return $this
     */
    public function setTotalFees($totalFees)
    {
        $this->container['totalFees'] = $totalFees;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\Error[]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FbaSmallAndLightV1\Model\Error[]|null $errors One or more unexpected errors occurred during the getSmallAndLightFeePreview operation.
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


