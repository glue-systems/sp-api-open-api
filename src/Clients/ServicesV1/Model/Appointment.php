<?php
/**
 * Appointment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\ServicesV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\ServicesV1\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\ServicesV1\ObjectSerializer;

/**
 * Appointment Class Doc Comment
 *
 * @category Class
 * @description The details of an appointment.
 * @package  Glue\SpApi\OpenAPI\Clients\ServicesV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Appointment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Appointment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appointmentId' => 'string',
        'appointmentStatus' => 'string',
        'appointmentTime' => '\Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\AppointmentTime',
        'assignedTechnicians' => '\Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\Technician[]',
        'rescheduledAppointmentId' => 'string',
        'poa' => '\Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\Poa'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'appointmentId' => null,
        'appointmentStatus' => null,
        'appointmentTime' => null,
        'assignedTechnicians' => null,
        'rescheduledAppointmentId' => null,
        'poa' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appointmentId' => 'appointmentId',
        'appointmentStatus' => 'appointmentStatus',
        'appointmentTime' => 'appointmentTime',
        'assignedTechnicians' => 'assignedTechnicians',
        'rescheduledAppointmentId' => 'rescheduledAppointmentId',
        'poa' => 'poa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appointmentId' => 'setAppointmentId',
        'appointmentStatus' => 'setAppointmentStatus',
        'appointmentTime' => 'setAppointmentTime',
        'assignedTechnicians' => 'setAssignedTechnicians',
        'rescheduledAppointmentId' => 'setRescheduledAppointmentId',
        'poa' => 'setPoa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appointmentId' => 'getAppointmentId',
        'appointmentStatus' => 'getAppointmentStatus',
        'appointmentTime' => 'getAppointmentTime',
        'assignedTechnicians' => 'getAssignedTechnicians',
        'rescheduledAppointmentId' => 'getRescheduledAppointmentId',
        'poa' => 'getPoa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const APPOINTMENT_STATUS_ACTIVE = 'ACTIVE';
    const APPOINTMENT_STATUS_CANCELLED = 'CANCELLED';
    const APPOINTMENT_STATUS_COMPLETED = 'COMPLETED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppointmentStatusAllowableValues()
    {
        return [
            self::APPOINTMENT_STATUS_ACTIVE,
            self::APPOINTMENT_STATUS_CANCELLED,
            self::APPOINTMENT_STATUS_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appointmentId'] = isset($data['appointmentId']) ? $data['appointmentId'] : null;
        $this->container['appointmentStatus'] = isset($data['appointmentStatus']) ? $data['appointmentStatus'] : null;
        $this->container['appointmentTime'] = isset($data['appointmentTime']) ? $data['appointmentTime'] : null;
        $this->container['assignedTechnicians'] = isset($data['assignedTechnicians']) ? $data['assignedTechnicians'] : null;
        $this->container['rescheduledAppointmentId'] = isset($data['rescheduledAppointmentId']) ? $data['rescheduledAppointmentId'] : null;
        $this->container['poa'] = isset($data['poa']) ? $data['poa'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['appointmentId']) && (mb_strlen($this->container['appointmentId']) > 100)) {
            $invalidProperties[] = "invalid value for 'appointmentId', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['appointmentId']) && (mb_strlen($this->container['appointmentId']) < 5)) {
            $invalidProperties[] = "invalid value for 'appointmentId', the character length must be bigger than or equal to 5.";
        }

        $allowedValues = $this->getAppointmentStatusAllowableValues();
        if (!is_null($this->container['appointmentStatus']) && !in_array($this->container['appointmentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'appointmentStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rescheduledAppointmentId']) && (mb_strlen($this->container['rescheduledAppointmentId']) > 100)) {
            $invalidProperties[] = "invalid value for 'rescheduledAppointmentId', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['rescheduledAppointmentId']) && (mb_strlen($this->container['rescheduledAppointmentId']) < 5)) {
            $invalidProperties[] = "invalid value for 'rescheduledAppointmentId', the character length must be bigger than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appointmentId
     *
     * @return string|null
     */
    public function getAppointmentId()
    {
        return $this->container['appointmentId'];
    }

    /**
     * Sets appointmentId
     *
     * @param string|null $appointmentId The appointment identifier.
     *
     * @return $this
     */
    public function setAppointmentId($appointmentId)
    {
        if (!is_null($appointmentId) && (mb_strlen($appointmentId) > 100)) {
            throw new \InvalidArgumentException('invalid length for $appointmentId when calling Appointment., must be smaller than or equal to 100.');
        }
        if (!is_null($appointmentId) && (mb_strlen($appointmentId) < 5)) {
            throw new \InvalidArgumentException('invalid length for $appointmentId when calling Appointment., must be bigger than or equal to 5.');
        }

        $this->container['appointmentId'] = $appointmentId;

        return $this;
    }

    /**
     * Gets appointmentStatus
     *
     * @return string|null
     */
    public function getAppointmentStatus()
    {
        return $this->container['appointmentStatus'];
    }

    /**
     * Sets appointmentStatus
     *
     * @param string|null $appointmentStatus The status of the appointment.
     *
     * @return $this
     */
    public function setAppointmentStatus($appointmentStatus)
    {
        $allowedValues = $this->getAppointmentStatusAllowableValues();
        if (!is_null($appointmentStatus) && !in_array($appointmentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'appointmentStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['appointmentStatus'] = $appointmentStatus;

        return $this;
    }

    /**
     * Gets appointmentTime
     *
     * @return \Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\AppointmentTime|null
     */
    public function getAppointmentTime()
    {
        return $this->container['appointmentTime'];
    }

    /**
     * Sets appointmentTime
     *
     * @param \Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\AppointmentTime|null $appointmentTime appointmentTime
     *
     * @return $this
     */
    public function setAppointmentTime($appointmentTime)
    {
        $this->container['appointmentTime'] = $appointmentTime;

        return $this;
    }

    /**
     * Gets assignedTechnicians
     *
     * @return \Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\Technician[]|null
     */
    public function getAssignedTechnicians()
    {
        return $this->container['assignedTechnicians'];
    }

    /**
     * Sets assignedTechnicians
     *
     * @param \Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\Technician[]|null $assignedTechnicians A list of technicians assigned to the service job.
     *
     * @return $this
     */
    public function setAssignedTechnicians($assignedTechnicians)
    {
        $this->container['assignedTechnicians'] = $assignedTechnicians;

        return $this;
    }

    /**
     * Gets rescheduledAppointmentId
     *
     * @return string|null
     */
    public function getRescheduledAppointmentId()
    {
        return $this->container['rescheduledAppointmentId'];
    }

    /**
     * Sets rescheduledAppointmentId
     *
     * @param string|null $rescheduledAppointmentId The appointment identifier.
     *
     * @return $this
     */
    public function setRescheduledAppointmentId($rescheduledAppointmentId)
    {
        if (!is_null($rescheduledAppointmentId) && (mb_strlen($rescheduledAppointmentId) > 100)) {
            throw new \InvalidArgumentException('invalid length for $rescheduledAppointmentId when calling Appointment., must be smaller than or equal to 100.');
        }
        if (!is_null($rescheduledAppointmentId) && (mb_strlen($rescheduledAppointmentId) < 5)) {
            throw new \InvalidArgumentException('invalid length for $rescheduledAppointmentId when calling Appointment., must be bigger than or equal to 5.');
        }

        $this->container['rescheduledAppointmentId'] = $rescheduledAppointmentId;

        return $this;
    }

    /**
     * Gets poa
     *
     * @return \Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\Poa|null
     */
    public function getPoa()
    {
        return $this->container['poa'];
    }

    /**
     * Sets poa
     *
     * @param \Glue\SpApi\OpenAPI\Clients\ServicesV1\Model\Poa|null $poa poa
     *
     * @return $this
     */
    public function setPoa($poa)
    {
        $this->container['poa'] = $poa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


