<?php
/**
 * ServiceUploadDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\ServicesV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\ServicesV1\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\ServicesV1\ObjectSerializer;

/**
 * ServiceUploadDocument Class Doc Comment
 *
 * @category Class
 * @description Input for to be uploaded document.
 * @package  Glue\SpApi\OpenAPI\Clients\ServicesV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ServiceUploadDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServiceUploadDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contentType' => 'string',
        'contentLength' => 'double',
        'contentMD5' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'contentType' => null,
        'contentLength' => 'int64',
        'contentMD5' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contentType' => 'contentType',
        'contentLength' => 'contentLength',
        'contentMD5' => 'contentMD5'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contentType' => 'setContentType',
        'contentLength' => 'setContentLength',
        'contentMD5' => 'setContentMD5'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contentType' => 'getContentType',
        'contentLength' => 'getContentLength',
        'contentMD5' => 'getContentMD5'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CONTENT_TYPE_TIFF = 'TIFF';
    const CONTENT_TYPE_JPG = 'JPG';
    const CONTENT_TYPE_PNG = 'PNG';
    const CONTENT_TYPE_JPEG = 'JPEG';
    const CONTENT_TYPE_GIF = 'GIF';
    const CONTENT_TYPE_PDF = 'PDF';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentTypeAllowableValues()
    {
        return [
            self::CONTENT_TYPE_TIFF,
            self::CONTENT_TYPE_JPG,
            self::CONTENT_TYPE_PNG,
            self::CONTENT_TYPE_JPEG,
            self::CONTENT_TYPE_GIF,
            self::CONTENT_TYPE_PDF,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contentType'] = isset($data['contentType']) ? $data['contentType'] : null;
        $this->container['contentLength'] = isset($data['contentLength']) ? $data['contentLength'] : null;
        $this->container['contentMD5'] = isset($data['contentMD5']) ? $data['contentMD5'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contentType'] === null) {
            $invalidProperties[] = "'contentType' can't be null";
        }
        $allowedValues = $this->getContentTypeAllowableValues();
        if (!is_null($this->container['contentType']) && !in_array($this->container['contentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contentType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['contentLength'] === null) {
            $invalidProperties[] = "'contentLength' can't be null";
        }
        if (($this->container['contentLength'] > 5.24288E+6)) {
            $invalidProperties[] = "invalid value for 'contentLength', must be smaller than or equal to 5.24288E+6.";
        }

        if (($this->container['contentLength'] < 1)) {
            $invalidProperties[] = "invalid value for 'contentLength', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['contentMD5']) && !preg_match("/^[A-Za-z0-9\\\\+\/]{22}={2}$/", $this->container['contentMD5'])) {
            $invalidProperties[] = "invalid value for 'contentMD5', must be conform to the pattern /^[A-Za-z0-9\\\\+\/]{22}={2}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contentType
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['contentType'];
    }

    /**
     * Sets contentType
     *
     * @param string $contentType The content type of the to-be-uploaded file
     *
     * @return $this
     */
    public function setContentType($contentType)
    {
        $allowedValues = $this->getContentTypeAllowableValues();
        if (!in_array($contentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contentType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contentType'] = $contentType;

        return $this;
    }

    /**
     * Gets contentLength
     *
     * @return double
     */
    public function getContentLength()
    {
        return $this->container['contentLength'];
    }

    /**
     * Sets contentLength
     *
     * @param double $contentLength The content length of the to-be-uploaded file
     *
     * @return $this
     */
    public function setContentLength($contentLength)
    {

        if (($contentLength > 5.24288E+6)) {
            throw new \InvalidArgumentException('invalid value for $contentLength when calling ServiceUploadDocument., must be smaller than or equal to 5.24288E+6.');
        }
        if (($contentLength < 1)) {
            throw new \InvalidArgumentException('invalid value for $contentLength when calling ServiceUploadDocument., must be bigger than or equal to 1.');
        }

        $this->container['contentLength'] = $contentLength;

        return $this;
    }

    /**
     * Gets contentMD5
     *
     * @return string|null
     */
    public function getContentMD5()
    {
        return $this->container['contentMD5'];
    }

    /**
     * Sets contentMD5
     *
     * @param string|null $contentMD5 An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.
     *
     * @return $this
     */
    public function setContentMD5($contentMD5)
    {

        if (!is_null($contentMD5) && (!preg_match("/^[A-Za-z0-9\\\\+\/]{22}={2}$/", $contentMD5))) {
            throw new \InvalidArgumentException("invalid value for $contentMD5 when calling ServiceUploadDocument., must conform to the pattern /^[A-Za-z0-9\\\\+\/]{22}={2}$/.");
        }

        $this->container['contentMD5'] = $contentMD5;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


