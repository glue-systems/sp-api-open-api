<?php
/**
 * ListOffersResponseOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery (automatic or manual) of any replenishable item at a frequency chosen by the customer.
 *
 * OpenAPI spec version: 2022-11-07
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\ObjectSerializer;

/**
 * ListOffersResponseOffer Class Doc Comment
 *
 * @category Class
 * @description An object which contains details about an offer.
 * @package  Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ListOffersResponseOffer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListOffersResponseOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sku' => 'string',
        'asin' => 'string',
        'marketplaceId' => 'string',
        'eligibility' => '\Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\EligibilityStatus',
        'offerProgramConfiguration' => '\Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\OfferProgramConfiguration',
        'programType' => '\Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\ProgramType',
        'vendorCodes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'sku' => null,
        'asin' => null,
        'marketplaceId' => null,
        'eligibility' => null,
        'offerProgramConfiguration' => null,
        'programType' => null,
        'vendorCodes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
        'asin' => 'asin',
        'marketplaceId' => 'marketplaceId',
        'eligibility' => 'eligibility',
        'offerProgramConfiguration' => 'offerProgramConfiguration',
        'programType' => 'programType',
        'vendorCodes' => 'vendorCodes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'asin' => 'setAsin',
        'marketplaceId' => 'setMarketplaceId',
        'eligibility' => 'setEligibility',
        'offerProgramConfiguration' => 'setOfferProgramConfiguration',
        'programType' => 'setProgramType',
        'vendorCodes' => 'setVendorCodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'asin' => 'getAsin',
        'marketplaceId' => 'getMarketplaceId',
        'eligibility' => 'getEligibility',
        'offerProgramConfiguration' => 'getOfferProgramConfiguration',
        'programType' => 'getProgramType',
        'vendorCodes' => 'getVendorCodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['eligibility'] = isset($data['eligibility']) ? $data['eligibility'] : null;
        $this->container['offerProgramConfiguration'] = isset($data['offerProgramConfiguration']) ? $data['offerProgramConfiguration'] : null;
        $this->container['programType'] = isset($data['programType']) ? $data['programType'] : null;
        $this->container['vendorCodes'] = isset($data['vendorCodes']) ? $data['vendorCodes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku The SKU. This property is only supported for sellers and not for vendors.
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets asin
     *
     * @return string|null
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string|null $asin The Amazon Standard Identification Number (ASIN).
     *
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets eligibility
     *
     * @return \Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\EligibilityStatus|null
     */
    public function getEligibility()
    {
        return $this->container['eligibility'];
    }

    /**
     * Sets eligibility
     *
     * @param \Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\EligibilityStatus|null $eligibility eligibility
     *
     * @return $this
     */
    public function setEligibility($eligibility)
    {
        $this->container['eligibility'] = $eligibility;

        return $this;
    }

    /**
     * Gets offerProgramConfiguration
     *
     * @return \Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\OfferProgramConfiguration|null
     */
    public function getOfferProgramConfiguration()
    {
        return $this->container['offerProgramConfiguration'];
    }

    /**
     * Sets offerProgramConfiguration
     *
     * @param \Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\OfferProgramConfiguration|null $offerProgramConfiguration offerProgramConfiguration
     *
     * @return $this
     */
    public function setOfferProgramConfiguration($offerProgramConfiguration)
    {
        $this->container['offerProgramConfiguration'] = $offerProgramConfiguration;

        return $this;
    }

    /**
     * Gets programType
     *
     * @return \Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\ProgramType|null
     */
    public function getProgramType()
    {
        return $this->container['programType'];
    }

    /**
     * Sets programType
     *
     * @param \Glue\SpApi\OpenAPI\Clients\ReplenishmentV20221107\Model\ProgramType|null $programType programType
     *
     * @return $this
     */
    public function setProgramType($programType)
    {
        $this->container['programType'] = $programType;

        return $this;
    }

    /**
     * Gets vendorCodes
     *
     * @return string[]|null
     */
    public function getVendorCodes()
    {
        return $this->container['vendorCodes'];
    }

    /**
     * Sets vendorCodes
     *
     * @param string[]|null $vendorCodes A list of vendor codes associated with the offer.
     *
     * @return $this
     */
    public function setVendorCodes($vendorCodes)
    {
        $this->container['vendorCodes'] = $vendorCodes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


