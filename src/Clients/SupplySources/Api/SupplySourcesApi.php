<?php
/**
 * SupplySourcesApi
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SPAPI\OpenAPI\Clients\SupplySources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SPAPI\OpenAPI\Clients\SupplySources\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException;
use Glue\SPAPI\OpenAPI\Clients\SupplySources\Configuration;
use Glue\SPAPI\OpenAPI\Clients\SupplySources\HeaderSelector;
use Glue\SPAPI\OpenAPI\Clients\SupplySources\ObjectSerializer;

/**
 * SupplySourcesApi Class Doc Comment
 *
 * @category Class
 * @package  Glue\SPAPI\OpenAPI\Clients\SupplySources
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplySourcesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveSupplySource
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList
     */
    public function archiveSupplySource($supply_source_id)
    {
        list($response) = $this->archiveSupplySourceWithHttpInfo($supply_source_id);
        return $response;
    }

    /**
     * Operation archiveSupplySourceWithHttpInfo
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveSupplySourceWithHttpInfo($supply_source_id)
    {
        $request = $this->archiveSupplySourceRequest($supply_source_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation archiveSupplySourceAsync
     *
     * 
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveSupplySourceAsync($supply_source_id)
    {
        return $this->archiveSupplySourceAsyncWithHttpInfo($supply_source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveSupplySourceAsyncWithHttpInfo($supply_source_id)
    {
        $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList';
        $request = $this->archiveSupplySourceRequest($supply_source_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveSupplySource'
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archiveSupplySourceRequest($supply_source_id)
    {
        // verify the required parameter 'supply_source_id' is set
        if ($supply_source_id === null || (is_array($supply_source_id) && count($supply_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supply_source_id when calling archiveSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supply_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supply_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSupplySource
     *
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceRequest $create_supply_source_request Request to create a supply source. (required)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceResponse|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList
     */
    public function createSupplySource($create_supply_source_request)
    {
        list($response) = $this->createSupplySourceWithHttpInfo($create_supply_source_request);
        return $response;
    }

    /**
     * Operation createSupplySourceWithHttpInfo
     *
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceRequest $create_supply_source_request Request to create a supply source. (required)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceResponse|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSupplySourceWithHttpInfo($create_supply_source_request)
    {
        $request = $this->createSupplySourceRequest($create_supply_source_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSupplySourceAsync
     *
     * 
     *
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceRequest $create_supply_source_request Request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplySourceAsync($create_supply_source_request)
    {
        return $this->createSupplySourceAsyncWithHttpInfo($create_supply_source_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceRequest $create_supply_source_request Request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplySourceAsyncWithHttpInfo($create_supply_source_request)
    {
        $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceResponse';
        $request = $this->createSupplySourceRequest($create_supply_source_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSupplySource'
     *
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\CreateSupplySourceRequest $create_supply_source_request Request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSupplySourceRequest($create_supply_source_request)
    {
        // verify the required parameter 'create_supply_source_request' is set
        if ($create_supply_source_request === null || (is_array($create_supply_source_request) && count($create_supply_source_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_supply_source_request when calling createSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($create_supply_source_request)) {
            $_tempBody = $create_supply_source_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplySource
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\SupplySource|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList
     */
    public function getSupplySource($supply_source_id)
    {
        list($response) = $this->getSupplySourceWithHttpInfo($supply_source_id);
        return $response;
    }

    /**
     * Operation getSupplySourceWithHttpInfo
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\SupplySource|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplySourceWithHttpInfo($supply_source_id)
    {
        $request = $this->getSupplySourceRequest($supply_source_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\SupplySource' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\SupplySource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\SupplySource';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\SupplySource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplySourceAsync
     *
     * 
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourceAsync($supply_source_id)
    {
        return $this->getSupplySourceAsyncWithHttpInfo($supply_source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourceAsyncWithHttpInfo($supply_source_id)
    {
        $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\SupplySource';
        $request = $this->getSupplySourceRequest($supply_source_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplySource'
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSupplySourceRequest($supply_source_id)
    {
        // verify the required parameter 'supply_source_id' is set
        if ($supply_source_id === null || (is_array($supply_source_id) && count($supply_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supply_source_id when calling getSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supply_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supply_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplySources
     *
     * @param  string $next_page_token Pagination token to retrieve a specific page of results. (optional)
     * @param  float $page_size Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\GetSupplySourcesResponse|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList
     */
    public function getSupplySources($next_page_token = null, $page_size = 10.0)
    {
        list($response) = $this->getSupplySourcesWithHttpInfo($next_page_token, $page_size);
        return $response;
    }

    /**
     * Operation getSupplySourcesWithHttpInfo
     *
     * @param  string $next_page_token Pagination token to retrieve a specific page of results. (optional)
     * @param  float $page_size Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\GetSupplySourcesResponse|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplySourcesWithHttpInfo($next_page_token = null, $page_size = 10.0)
    {
        $request = $this->getSupplySourcesRequest($next_page_token, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\GetSupplySourcesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\GetSupplySourcesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\GetSupplySourcesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\GetSupplySourcesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplySourcesAsync
     *
     * 
     *
     * @param  string $next_page_token Pagination token to retrieve a specific page of results. (optional)
     * @param  float $page_size Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourcesAsync($next_page_token = null, $page_size = 10.0)
    {
        return $this->getSupplySourcesAsyncWithHttpInfo($next_page_token, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplySourcesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $next_page_token Pagination token to retrieve a specific page of results. (optional)
     * @param  float $page_size Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourcesAsyncWithHttpInfo($next_page_token = null, $page_size = 10.0)
    {
        $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\GetSupplySourcesResponse';
        $request = $this->getSupplySourcesRequest($next_page_token, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplySources'
     *
     * @param  string $next_page_token Pagination token to retrieve a specific page of results. (optional)
     * @param  float $page_size Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSupplySourcesRequest($next_page_token = null, $page_size = 10.0)
    {

        $resourcePath = '/supplySources/2020-07-01/supplySources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($next_page_token !== null) {
            $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($next_page_token);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplySource
     *
     * @param  string $supply_source_id Unique identitier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceRequest $update_supply_source_request update_supply_source_request (optional)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList
     */
    public function updateSupplySource($supply_source_id, $update_supply_source_request = null)
    {
        list($response) = $this->updateSupplySourceWithHttpInfo($supply_source_id, $update_supply_source_request);
        return $response;
    }

    /**
     * Operation updateSupplySourceWithHttpInfo
     *
     * @param  string $supply_source_id Unique identitier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceRequest $update_supply_source_request (optional)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplySourceWithHttpInfo($supply_source_id, $update_supply_source_request = null)
    {
        $request = $this->updateSupplySourceRequest($supply_source_id, $update_supply_source_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplySourceAsync
     *
     * 
     *
     * @param  string $supply_source_id Unique identitier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceRequest $update_supply_source_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceAsync($supply_source_id, $update_supply_source_request = null)
    {
        return $this->updateSupplySourceAsyncWithHttpInfo($supply_source_id, $update_supply_source_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supply_source_id Unique identitier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceRequest $update_supply_source_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceAsyncWithHttpInfo($supply_source_id, $update_supply_source_request = null)
    {
        $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList';
        $request = $this->updateSupplySourceRequest($supply_source_id, $update_supply_source_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplySource'
     *
     * @param  string $supply_source_id Unique identitier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceRequest $update_supply_source_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSupplySourceRequest($supply_source_id, $update_supply_source_request = null)
    {
        // verify the required parameter 'supply_source_id' is set
        if ($supply_source_id === null || (is_array($supply_source_id) && count($supply_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supply_source_id when calling updateSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supply_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supply_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_supply_source_request)) {
            $_tempBody = $update_supply_source_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplySourceStatus
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceStatusRequest $update_supply_source_status_request update_supply_source_status_request (optional)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList
     */
    public function updateSupplySourceStatus($supply_source_id, $update_supply_source_status_request = null)
    {
        list($response) = $this->updateSupplySourceStatusWithHttpInfo($supply_source_id, $update_supply_source_status_request);
        return $response;
    }

    /**
     * Operation updateSupplySourceStatusWithHttpInfo
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceStatusRequest $update_supply_source_status_request (optional)
     *
     * @throws \Glue\SPAPI\OpenAPI\Clients\SupplySources\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList|\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplySourceStatusWithHttpInfo($supply_source_id, $update_supply_source_status_request = null)
    {
        $request = $this->updateSupplySourceStatusRequest($supply_source_id, $update_supply_source_status_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplySourceStatusAsync
     *
     * 
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceStatusRequest $update_supply_source_status_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceStatusAsync($supply_source_id, $update_supply_source_status_request = null)
    {
        return $this->updateSupplySourceStatusAsyncWithHttpInfo($supply_source_id, $update_supply_source_status_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplySourceStatusAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceStatusRequest $update_supply_source_status_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceStatusAsyncWithHttpInfo($supply_source_id, $update_supply_source_status_request = null)
    {
        $returnType = '\Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\ErrorList';
        $request = $this->updateSupplySourceStatusRequest($supply_source_id, $update_supply_source_status_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplySourceStatus'
     *
     * @param  string $supply_source_id Unique identifier of a supply source. (required)
     * @param  \Glue\SPAPI\OpenAPI\Clients\SupplySources\Model\UpdateSupplySourceStatusRequest $update_supply_source_status_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSupplySourceStatusRequest($supply_source_id, $update_supply_source_status_request = null)
    {
        // verify the required parameter 'supply_source_id' is set
        if ($supply_source_id === null || (is_array($supply_source_id) && count($supply_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supply_source_id when calling updateSupplySourceStatus'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supply_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supply_source_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_supply_source_status_request)) {
            $_tempBody = $update_supply_source_status_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
