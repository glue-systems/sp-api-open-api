<?php
/**
 * FulfillmentOrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\ObjectSerializer;

/**
 * FulfillmentOrderItem Class Doc Comment
 *
 * @category Class
 * @description Item information for a fulfillment order.
 * @package  Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FulfillmentOrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FulfillmentOrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sellerSku' => 'string',
        'sellerFulfillmentOrderItemId' => 'string',
        'quantity' => 'int',
        'giftMessage' => 'string',
        'displayableComment' => 'string',
        'fulfillmentNetworkSku' => 'string',
        'orderItemDisposition' => 'string',
        'cancelledQuantity' => 'int',
        'unfulfillableQuantity' => 'int',
        'estimatedShipDate' => '\DateTime',
        'estimatedArrivalDate' => '\DateTime',
        'perUnitPrice' => '\Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money',
        'perUnitTax' => '\Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money',
        'perUnitDeclaredValue' => '\Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'sellerSku' => null,
        'sellerFulfillmentOrderItemId' => null,
        'quantity' => 'int32',
        'giftMessage' => null,
        'displayableComment' => null,
        'fulfillmentNetworkSku' => null,
        'orderItemDisposition' => null,
        'cancelledQuantity' => 'int32',
        'unfulfillableQuantity' => 'int32',
        'estimatedShipDate' => 'date-time',
        'estimatedArrivalDate' => 'date-time',
        'perUnitPrice' => null,
        'perUnitTax' => null,
        'perUnitDeclaredValue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sellerSku' => 'sellerSku',
        'sellerFulfillmentOrderItemId' => 'sellerFulfillmentOrderItemId',
        'quantity' => 'quantity',
        'giftMessage' => 'giftMessage',
        'displayableComment' => 'displayableComment',
        'fulfillmentNetworkSku' => 'fulfillmentNetworkSku',
        'orderItemDisposition' => 'orderItemDisposition',
        'cancelledQuantity' => 'cancelledQuantity',
        'unfulfillableQuantity' => 'unfulfillableQuantity',
        'estimatedShipDate' => 'estimatedShipDate',
        'estimatedArrivalDate' => 'estimatedArrivalDate',
        'perUnitPrice' => 'perUnitPrice',
        'perUnitTax' => 'perUnitTax',
        'perUnitDeclaredValue' => 'perUnitDeclaredValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sellerSku' => 'setSellerSku',
        'sellerFulfillmentOrderItemId' => 'setSellerFulfillmentOrderItemId',
        'quantity' => 'setQuantity',
        'giftMessage' => 'setGiftMessage',
        'displayableComment' => 'setDisplayableComment',
        'fulfillmentNetworkSku' => 'setFulfillmentNetworkSku',
        'orderItemDisposition' => 'setOrderItemDisposition',
        'cancelledQuantity' => 'setCancelledQuantity',
        'unfulfillableQuantity' => 'setUnfulfillableQuantity',
        'estimatedShipDate' => 'setEstimatedShipDate',
        'estimatedArrivalDate' => 'setEstimatedArrivalDate',
        'perUnitPrice' => 'setPerUnitPrice',
        'perUnitTax' => 'setPerUnitTax',
        'perUnitDeclaredValue' => 'setPerUnitDeclaredValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sellerSku' => 'getSellerSku',
        'sellerFulfillmentOrderItemId' => 'getSellerFulfillmentOrderItemId',
        'quantity' => 'getQuantity',
        'giftMessage' => 'getGiftMessage',
        'displayableComment' => 'getDisplayableComment',
        'fulfillmentNetworkSku' => 'getFulfillmentNetworkSku',
        'orderItemDisposition' => 'getOrderItemDisposition',
        'cancelledQuantity' => 'getCancelledQuantity',
        'unfulfillableQuantity' => 'getUnfulfillableQuantity',
        'estimatedShipDate' => 'getEstimatedShipDate',
        'estimatedArrivalDate' => 'getEstimatedArrivalDate',
        'perUnitPrice' => 'getPerUnitPrice',
        'perUnitTax' => 'getPerUnitTax',
        'perUnitDeclaredValue' => 'getPerUnitDeclaredValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sellerSku'] = isset($data['sellerSku']) ? $data['sellerSku'] : null;
        $this->container['sellerFulfillmentOrderItemId'] = isset($data['sellerFulfillmentOrderItemId']) ? $data['sellerFulfillmentOrderItemId'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['giftMessage'] = isset($data['giftMessage']) ? $data['giftMessage'] : null;
        $this->container['displayableComment'] = isset($data['displayableComment']) ? $data['displayableComment'] : null;
        $this->container['fulfillmentNetworkSku'] = isset($data['fulfillmentNetworkSku']) ? $data['fulfillmentNetworkSku'] : null;
        $this->container['orderItemDisposition'] = isset($data['orderItemDisposition']) ? $data['orderItemDisposition'] : null;
        $this->container['cancelledQuantity'] = isset($data['cancelledQuantity']) ? $data['cancelledQuantity'] : null;
        $this->container['unfulfillableQuantity'] = isset($data['unfulfillableQuantity']) ? $data['unfulfillableQuantity'] : null;
        $this->container['estimatedShipDate'] = isset($data['estimatedShipDate']) ? $data['estimatedShipDate'] : null;
        $this->container['estimatedArrivalDate'] = isset($data['estimatedArrivalDate']) ? $data['estimatedArrivalDate'] : null;
        $this->container['perUnitPrice'] = isset($data['perUnitPrice']) ? $data['perUnitPrice'] : null;
        $this->container['perUnitTax'] = isset($data['perUnitTax']) ? $data['perUnitTax'] : null;
        $this->container['perUnitDeclaredValue'] = isset($data['perUnitDeclaredValue']) ? $data['perUnitDeclaredValue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sellerSku'] === null) {
            $invalidProperties[] = "'sellerSku' can't be null";
        }
        if ($this->container['sellerFulfillmentOrderItemId'] === null) {
            $invalidProperties[] = "'sellerFulfillmentOrderItemId' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['cancelledQuantity'] === null) {
            $invalidProperties[] = "'cancelledQuantity' can't be null";
        }
        if ($this->container['unfulfillableQuantity'] === null) {
            $invalidProperties[] = "'unfulfillableQuantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sellerSku
     *
     * @return string
     */
    public function getSellerSku()
    {
        return $this->container['sellerSku'];
    }

    /**
     * Sets sellerSku
     *
     * @param string $sellerSku The seller SKU of the item.
     *
     * @return $this
     */
    public function setSellerSku($sellerSku)
    {
        $this->container['sellerSku'] = $sellerSku;

        return $this;
    }

    /**
     * Gets sellerFulfillmentOrderItemId
     *
     * @return string
     */
    public function getSellerFulfillmentOrderItemId()
    {
        return $this->container['sellerFulfillmentOrderItemId'];
    }

    /**
     * Sets sellerFulfillmentOrderItemId
     *
     * @param string $sellerFulfillmentOrderItemId A fulfillment order item identifier submitted with a call to the createFulfillmentOrder operation.
     *
     * @return $this
     */
    public function setSellerFulfillmentOrderItemId($sellerFulfillmentOrderItemId)
    {
        $this->container['sellerFulfillmentOrderItemId'] = $sellerFulfillmentOrderItemId;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The item quantity.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets giftMessage
     *
     * @return string|null
     */
    public function getGiftMessage()
    {
        return $this->container['giftMessage'];
    }

    /**
     * Sets giftMessage
     *
     * @param string|null $giftMessage A message to the gift recipient, if applicable.
     *
     * @return $this
     */
    public function setGiftMessage($giftMessage)
    {
        $this->container['giftMessage'] = $giftMessage;

        return $this;
    }

    /**
     * Gets displayableComment
     *
     * @return string|null
     */
    public function getDisplayableComment()
    {
        return $this->container['displayableComment'];
    }

    /**
     * Sets displayableComment
     *
     * @param string|null $displayableComment Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
     *
     * @return $this
     */
    public function setDisplayableComment($displayableComment)
    {
        $this->container['displayableComment'] = $displayableComment;

        return $this;
    }

    /**
     * Gets fulfillmentNetworkSku
     *
     * @return string|null
     */
    public function getFulfillmentNetworkSku()
    {
        return $this->container['fulfillmentNetworkSku'];
    }

    /**
     * Sets fulfillmentNetworkSku
     *
     * @param string|null $fulfillmentNetworkSku Amazon's fulfillment network SKU of the item.
     *
     * @return $this
     */
    public function setFulfillmentNetworkSku($fulfillmentNetworkSku)
    {
        $this->container['fulfillmentNetworkSku'] = $fulfillmentNetworkSku;

        return $this;
    }

    /**
     * Gets orderItemDisposition
     *
     * @return string|null
     */
    public function getOrderItemDisposition()
    {
        return $this->container['orderItemDisposition'];
    }

    /**
     * Sets orderItemDisposition
     *
     * @param string|null $orderItemDisposition Indicates whether the item is sellable or unsellable.
     *
     * @return $this
     */
    public function setOrderItemDisposition($orderItemDisposition)
    {
        $this->container['orderItemDisposition'] = $orderItemDisposition;

        return $this;
    }

    /**
     * Gets cancelledQuantity
     *
     * @return int
     */
    public function getCancelledQuantity()
    {
        return $this->container['cancelledQuantity'];
    }

    /**
     * Sets cancelledQuantity
     *
     * @param int $cancelledQuantity The item quantity.
     *
     * @return $this
     */
    public function setCancelledQuantity($cancelledQuantity)
    {
        $this->container['cancelledQuantity'] = $cancelledQuantity;

        return $this;
    }

    /**
     * Gets unfulfillableQuantity
     *
     * @return int
     */
    public function getUnfulfillableQuantity()
    {
        return $this->container['unfulfillableQuantity'];
    }

    /**
     * Sets unfulfillableQuantity
     *
     * @param int $unfulfillableQuantity The item quantity.
     *
     * @return $this
     */
    public function setUnfulfillableQuantity($unfulfillableQuantity)
    {
        $this->container['unfulfillableQuantity'] = $unfulfillableQuantity;

        return $this;
    }

    /**
     * Gets estimatedShipDate
     *
     * @return \DateTime|null
     */
    public function getEstimatedShipDate()
    {
        return $this->container['estimatedShipDate'];
    }

    /**
     * Sets estimatedShipDate
     *
     * @param \DateTime|null $estimatedShipDate estimatedShipDate
     *
     * @return $this
     */
    public function setEstimatedShipDate($estimatedShipDate)
    {
        $this->container['estimatedShipDate'] = $estimatedShipDate;

        return $this;
    }

    /**
     * Gets estimatedArrivalDate
     *
     * @return \DateTime|null
     */
    public function getEstimatedArrivalDate()
    {
        return $this->container['estimatedArrivalDate'];
    }

    /**
     * Sets estimatedArrivalDate
     *
     * @param \DateTime|null $estimatedArrivalDate estimatedArrivalDate
     *
     * @return $this
     */
    public function setEstimatedArrivalDate($estimatedArrivalDate)
    {
        $this->container['estimatedArrivalDate'] = $estimatedArrivalDate;

        return $this;
    }

    /**
     * Gets perUnitPrice
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money|null
     */
    public function getPerUnitPrice()
    {
        return $this->container['perUnitPrice'];
    }

    /**
     * Sets perUnitPrice
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money|null $perUnitPrice perUnitPrice
     *
     * @return $this
     */
    public function setPerUnitPrice($perUnitPrice)
    {
        $this->container['perUnitPrice'] = $perUnitPrice;

        return $this;
    }

    /**
     * Gets perUnitTax
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money|null
     */
    public function getPerUnitTax()
    {
        return $this->container['perUnitTax'];
    }

    /**
     * Sets perUnitTax
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money|null $perUnitTax perUnitTax
     *
     * @return $this
     */
    public function setPerUnitTax($perUnitTax)
    {
        $this->container['perUnitTax'] = $perUnitTax;

        return $this;
    }

    /**
     * Gets perUnitDeclaredValue
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money|null
     */
    public function getPerUnitDeclaredValue()
    {
        return $this->container['perUnitDeclaredValue'];
    }

    /**
     * Sets perUnitDeclaredValue
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\Money|null $perUnitDeclaredValue perUnitDeclaredValue
     *
     * @return $this
     */
    public function setPerUnitDeclaredValue($perUnitDeclaredValue)
    {
        $this->container['perUnitDeclaredValue'] = $perUnitDeclaredValue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


