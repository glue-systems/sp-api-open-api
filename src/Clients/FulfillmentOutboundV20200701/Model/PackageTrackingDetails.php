<?php
/**
 * PackageTrackingDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\ObjectSerializer;

/**
 * PackageTrackingDetails Class Doc Comment
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PackageTrackingDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PackageTrackingDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'packageNumber' => 'int',
        'trackingNumber' => 'string',
        'customerTrackingLink' => 'string',
        'carrierCode' => 'string',
        'carrierPhoneNumber' => 'string',
        'carrierURL' => 'string',
        'shipDate' => '\DateTime',
        'estimatedArrivalDate' => '\DateTime',
        'shipToAddress' => '\Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\TrackingAddress',
        'currentStatus' => '\Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\CurrentStatus',
        'currentStatusDescription' => 'string',
        'signedForBy' => 'string',
        'additionalLocationInfo' => '\Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\AdditionalLocationInfo',
        'trackingEvents' => '\Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\TrackingEvent[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'packageNumber' => 'int32',
        'trackingNumber' => null,
        'customerTrackingLink' => null,
        'carrierCode' => null,
        'carrierPhoneNumber' => null,
        'carrierURL' => null,
        'shipDate' => 'date-time',
        'estimatedArrivalDate' => 'date-time',
        'shipToAddress' => null,
        'currentStatus' => null,
        'currentStatusDescription' => null,
        'signedForBy' => null,
        'additionalLocationInfo' => null,
        'trackingEvents' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'packageNumber' => 'packageNumber',
        'trackingNumber' => 'trackingNumber',
        'customerTrackingLink' => 'customerTrackingLink',
        'carrierCode' => 'carrierCode',
        'carrierPhoneNumber' => 'carrierPhoneNumber',
        'carrierURL' => 'carrierURL',
        'shipDate' => 'shipDate',
        'estimatedArrivalDate' => 'estimatedArrivalDate',
        'shipToAddress' => 'shipToAddress',
        'currentStatus' => 'currentStatus',
        'currentStatusDescription' => 'currentStatusDescription',
        'signedForBy' => 'signedForBy',
        'additionalLocationInfo' => 'additionalLocationInfo',
        'trackingEvents' => 'trackingEvents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'packageNumber' => 'setPackageNumber',
        'trackingNumber' => 'setTrackingNumber',
        'customerTrackingLink' => 'setCustomerTrackingLink',
        'carrierCode' => 'setCarrierCode',
        'carrierPhoneNumber' => 'setCarrierPhoneNumber',
        'carrierURL' => 'setCarrierURL',
        'shipDate' => 'setShipDate',
        'estimatedArrivalDate' => 'setEstimatedArrivalDate',
        'shipToAddress' => 'setShipToAddress',
        'currentStatus' => 'setCurrentStatus',
        'currentStatusDescription' => 'setCurrentStatusDescription',
        'signedForBy' => 'setSignedForBy',
        'additionalLocationInfo' => 'setAdditionalLocationInfo',
        'trackingEvents' => 'setTrackingEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'packageNumber' => 'getPackageNumber',
        'trackingNumber' => 'getTrackingNumber',
        'customerTrackingLink' => 'getCustomerTrackingLink',
        'carrierCode' => 'getCarrierCode',
        'carrierPhoneNumber' => 'getCarrierPhoneNumber',
        'carrierURL' => 'getCarrierURL',
        'shipDate' => 'getShipDate',
        'estimatedArrivalDate' => 'getEstimatedArrivalDate',
        'shipToAddress' => 'getShipToAddress',
        'currentStatus' => 'getCurrentStatus',
        'currentStatusDescription' => 'getCurrentStatusDescription',
        'signedForBy' => 'getSignedForBy',
        'additionalLocationInfo' => 'getAdditionalLocationInfo',
        'trackingEvents' => 'getTrackingEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['packageNumber'] = isset($data['packageNumber']) ? $data['packageNumber'] : null;
        $this->container['trackingNumber'] = isset($data['trackingNumber']) ? $data['trackingNumber'] : null;
        $this->container['customerTrackingLink'] = isset($data['customerTrackingLink']) ? $data['customerTrackingLink'] : null;
        $this->container['carrierCode'] = isset($data['carrierCode']) ? $data['carrierCode'] : null;
        $this->container['carrierPhoneNumber'] = isset($data['carrierPhoneNumber']) ? $data['carrierPhoneNumber'] : null;
        $this->container['carrierURL'] = isset($data['carrierURL']) ? $data['carrierURL'] : null;
        $this->container['shipDate'] = isset($data['shipDate']) ? $data['shipDate'] : null;
        $this->container['estimatedArrivalDate'] = isset($data['estimatedArrivalDate']) ? $data['estimatedArrivalDate'] : null;
        $this->container['shipToAddress'] = isset($data['shipToAddress']) ? $data['shipToAddress'] : null;
        $this->container['currentStatus'] = isset($data['currentStatus']) ? $data['currentStatus'] : null;
        $this->container['currentStatusDescription'] = isset($data['currentStatusDescription']) ? $data['currentStatusDescription'] : null;
        $this->container['signedForBy'] = isset($data['signedForBy']) ? $data['signedForBy'] : null;
        $this->container['additionalLocationInfo'] = isset($data['additionalLocationInfo']) ? $data['additionalLocationInfo'] : null;
        $this->container['trackingEvents'] = isset($data['trackingEvents']) ? $data['trackingEvents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['packageNumber'] === null) {
            $invalidProperties[] = "'packageNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets packageNumber
     *
     * @return int
     */
    public function getPackageNumber()
    {
        return $this->container['packageNumber'];
    }

    /**
     * Sets packageNumber
     *
     * @param int $packageNumber The package identifier.
     *
     * @return $this
     */
    public function setPackageNumber($packageNumber)
    {
        $this->container['packageNumber'] = $packageNumber;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string|null $trackingNumber The tracking number for the package.
     *
     * @return $this
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets customerTrackingLink
     *
     * @return string|null
     */
    public function getCustomerTrackingLink()
    {
        return $this->container['customerTrackingLink'];
    }

    /**
     * Sets customerTrackingLink
     *
     * @param string|null $customerTrackingLink Link on swiship.com that allows customers to track the package.
     *
     * @return $this
     */
    public function setCustomerTrackingLink($customerTrackingLink)
    {
        $this->container['customerTrackingLink'] = $customerTrackingLink;

        return $this;
    }

    /**
     * Gets carrierCode
     *
     * @return string|null
     */
    public function getCarrierCode()
    {
        return $this->container['carrierCode'];
    }

    /**
     * Sets carrierCode
     *
     * @param string|null $carrierCode The name of the carrier.
     *
     * @return $this
     */
    public function setCarrierCode($carrierCode)
    {
        $this->container['carrierCode'] = $carrierCode;

        return $this;
    }

    /**
     * Gets carrierPhoneNumber
     *
     * @return string|null
     */
    public function getCarrierPhoneNumber()
    {
        return $this->container['carrierPhoneNumber'];
    }

    /**
     * Sets carrierPhoneNumber
     *
     * @param string|null $carrierPhoneNumber The phone number of the carrier.
     *
     * @return $this
     */
    public function setCarrierPhoneNumber($carrierPhoneNumber)
    {
        $this->container['carrierPhoneNumber'] = $carrierPhoneNumber;

        return $this;
    }

    /**
     * Gets carrierURL
     *
     * @return string|null
     */
    public function getCarrierURL()
    {
        return $this->container['carrierURL'];
    }

    /**
     * Sets carrierURL
     *
     * @param string|null $carrierURL The URL of the carrier's website.
     *
     * @return $this
     */
    public function setCarrierURL($carrierURL)
    {
        $this->container['carrierURL'] = $carrierURL;

        return $this;
    }

    /**
     * Gets shipDate
     *
     * @return \DateTime|null
     */
    public function getShipDate()
    {
        return $this->container['shipDate'];
    }

    /**
     * Sets shipDate
     *
     * @param \DateTime|null $shipDate shipDate
     *
     * @return $this
     */
    public function setShipDate($shipDate)
    {
        $this->container['shipDate'] = $shipDate;

        return $this;
    }

    /**
     * Gets estimatedArrivalDate
     *
     * @return \DateTime|null
     */
    public function getEstimatedArrivalDate()
    {
        return $this->container['estimatedArrivalDate'];
    }

    /**
     * Sets estimatedArrivalDate
     *
     * @param \DateTime|null $estimatedArrivalDate estimatedArrivalDate
     *
     * @return $this
     */
    public function setEstimatedArrivalDate($estimatedArrivalDate)
    {
        $this->container['estimatedArrivalDate'] = $estimatedArrivalDate;

        return $this;
    }

    /**
     * Gets shipToAddress
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\TrackingAddress|null
     */
    public function getShipToAddress()
    {
        return $this->container['shipToAddress'];
    }

    /**
     * Sets shipToAddress
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\TrackingAddress|null $shipToAddress shipToAddress
     *
     * @return $this
     */
    public function setShipToAddress($shipToAddress)
    {
        $this->container['shipToAddress'] = $shipToAddress;

        return $this;
    }

    /**
     * Gets currentStatus
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\CurrentStatus|null
     */
    public function getCurrentStatus()
    {
        return $this->container['currentStatus'];
    }

    /**
     * Sets currentStatus
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\CurrentStatus|null $currentStatus currentStatus
     *
     * @return $this
     */
    public function setCurrentStatus($currentStatus)
    {
        $this->container['currentStatus'] = $currentStatus;

        return $this;
    }

    /**
     * Gets currentStatusDescription
     *
     * @return string|null
     */
    public function getCurrentStatusDescription()
    {
        return $this->container['currentStatusDescription'];
    }

    /**
     * Sets currentStatusDescription
     *
     * @param string|null $currentStatusDescription Description corresponding to the CurrentStatus value.
     *
     * @return $this
     */
    public function setCurrentStatusDescription($currentStatusDescription)
    {
        $this->container['currentStatusDescription'] = $currentStatusDescription;

        return $this;
    }

    /**
     * Gets signedForBy
     *
     * @return string|null
     */
    public function getSignedForBy()
    {
        return $this->container['signedForBy'];
    }

    /**
     * Sets signedForBy
     *
     * @param string|null $signedForBy The name of the person who signed for the package.
     *
     * @return $this
     */
    public function setSignedForBy($signedForBy)
    {
        $this->container['signedForBy'] = $signedForBy;

        return $this;
    }

    /**
     * Gets additionalLocationInfo
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\AdditionalLocationInfo|null
     */
    public function getAdditionalLocationInfo()
    {
        return $this->container['additionalLocationInfo'];
    }

    /**
     * Sets additionalLocationInfo
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\AdditionalLocationInfo|null $additionalLocationInfo additionalLocationInfo
     *
     * @return $this
     */
    public function setAdditionalLocationInfo($additionalLocationInfo)
    {
        $this->container['additionalLocationInfo'] = $additionalLocationInfo;

        return $this;
    }

    /**
     * Gets trackingEvents
     *
     * @return \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\TrackingEvent[]|null
     */
    public function getTrackingEvents()
    {
        return $this->container['trackingEvents'];
    }

    /**
     * Sets trackingEvents
     *
     * @param \Glue\SpApi\OpenAPI\Clients\FulfillmentOutboundV20200701\Model\TrackingEvent[]|null $trackingEvents An array of tracking event information.
     *
     * @return $this
     */
    public function setTrackingEvents($trackingEvents)
    {
        $this->container['trackingEvents'] = $trackingEvents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


