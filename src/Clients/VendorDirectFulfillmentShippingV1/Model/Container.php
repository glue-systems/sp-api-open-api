<?php
/**
 * Container
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\ObjectSerializer;

/**
 * Container Class Doc Comment
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Container implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Container';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'containerType' => 'string',
        'containerIdentifier' => 'string',
        'trackingNumber' => 'string',
        'manifestId' => 'string',
        'manifestDate' => 'string',
        'shipMethod' => 'string',
        'scacCode' => 'string',
        'carrier' => 'string',
        'containerSequenceNumber' => 'int',
        'dimensions' => '\Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\Dimensions',
        'weight' => '\Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\Weight',
        'packedItems' => '\Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\PackedItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'containerType' => null,
        'containerIdentifier' => null,
        'trackingNumber' => null,
        'manifestId' => null,
        'manifestDate' => null,
        'shipMethod' => null,
        'scacCode' => null,
        'carrier' => null,
        'containerSequenceNumber' => null,
        'dimensions' => null,
        'weight' => null,
        'packedItems' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'containerType' => 'containerType',
        'containerIdentifier' => 'containerIdentifier',
        'trackingNumber' => 'trackingNumber',
        'manifestId' => 'manifestId',
        'manifestDate' => 'manifestDate',
        'shipMethod' => 'shipMethod',
        'scacCode' => 'scacCode',
        'carrier' => 'carrier',
        'containerSequenceNumber' => 'containerSequenceNumber',
        'dimensions' => 'dimensions',
        'weight' => 'weight',
        'packedItems' => 'packedItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'containerType' => 'setContainerType',
        'containerIdentifier' => 'setContainerIdentifier',
        'trackingNumber' => 'setTrackingNumber',
        'manifestId' => 'setManifestId',
        'manifestDate' => 'setManifestDate',
        'shipMethod' => 'setShipMethod',
        'scacCode' => 'setScacCode',
        'carrier' => 'setCarrier',
        'containerSequenceNumber' => 'setContainerSequenceNumber',
        'dimensions' => 'setDimensions',
        'weight' => 'setWeight',
        'packedItems' => 'setPackedItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'containerType' => 'getContainerType',
        'containerIdentifier' => 'getContainerIdentifier',
        'trackingNumber' => 'getTrackingNumber',
        'manifestId' => 'getManifestId',
        'manifestDate' => 'getManifestDate',
        'shipMethod' => 'getShipMethod',
        'scacCode' => 'getScacCode',
        'carrier' => 'getCarrier',
        'containerSequenceNumber' => 'getContainerSequenceNumber',
        'dimensions' => 'getDimensions',
        'weight' => 'getWeight',
        'packedItems' => 'getPackedItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CONTAINER_TYPE_CARTON = 'carton';
    const CONTAINER_TYPE_PALLET = 'pallet';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerTypeAllowableValues()
    {
        return [
            self::CONTAINER_TYPE_CARTON,
            self::CONTAINER_TYPE_PALLET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['containerType'] = isset($data['containerType']) ? $data['containerType'] : null;
        $this->container['containerIdentifier'] = isset($data['containerIdentifier']) ? $data['containerIdentifier'] : null;
        $this->container['trackingNumber'] = isset($data['trackingNumber']) ? $data['trackingNumber'] : null;
        $this->container['manifestId'] = isset($data['manifestId']) ? $data['manifestId'] : null;
        $this->container['manifestDate'] = isset($data['manifestDate']) ? $data['manifestDate'] : null;
        $this->container['shipMethod'] = isset($data['shipMethod']) ? $data['shipMethod'] : null;
        $this->container['scacCode'] = isset($data['scacCode']) ? $data['scacCode'] : null;
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['containerSequenceNumber'] = isset($data['containerSequenceNumber']) ? $data['containerSequenceNumber'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['packedItems'] = isset($data['packedItems']) ? $data['packedItems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['containerType'] === null) {
            $invalidProperties[] = "'containerType' can't be null";
        }
        $allowedValues = $this->getContainerTypeAllowableValues();
        if (!is_null($this->container['containerType']) && !in_array($this->container['containerType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'containerType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['containerIdentifier'] === null) {
            $invalidProperties[] = "'containerIdentifier' can't be null";
        }
        if ($this->container['packedItems'] === null) {
            $invalidProperties[] = "'packedItems' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets containerType
     *
     * @return string
     */
    public function getContainerType()
    {
        return $this->container['containerType'];
    }

    /**
     * Sets containerType
     *
     * @param string $containerType The type of container.
     *
     * @return $this
     */
    public function setContainerType($containerType)
    {
        $allowedValues = $this->getContainerTypeAllowableValues();
        if (!in_array($containerType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'containerType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['containerType'] = $containerType;

        return $this;
    }

    /**
     * Gets containerIdentifier
     *
     * @return string
     */
    public function getContainerIdentifier()
    {
        return $this->container['containerIdentifier'];
    }

    /**
     * Sets containerIdentifier
     *
     * @param string $containerIdentifier The container identifier.
     *
     * @return $this
     */
    public function setContainerIdentifier($containerIdentifier)
    {
        $this->container['containerIdentifier'] = $containerIdentifier;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string|null $trackingNumber The tracking number.
     *
     * @return $this
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets manifestId
     *
     * @return string|null
     */
    public function getManifestId()
    {
        return $this->container['manifestId'];
    }

    /**
     * Sets manifestId
     *
     * @param string|null $manifestId The manifest identifier.
     *
     * @return $this
     */
    public function setManifestId($manifestId)
    {
        $this->container['manifestId'] = $manifestId;

        return $this;
    }

    /**
     * Gets manifestDate
     *
     * @return string|null
     */
    public function getManifestDate()
    {
        return $this->container['manifestDate'];
    }

    /**
     * Sets manifestDate
     *
     * @param string|null $manifestDate The date of the manifest.
     *
     * @return $this
     */
    public function setManifestDate($manifestDate)
    {
        $this->container['manifestDate'] = $manifestDate;

        return $this;
    }

    /**
     * Gets shipMethod
     *
     * @return string|null
     */
    public function getShipMethod()
    {
        return $this->container['shipMethod'];
    }

    /**
     * Sets shipMethod
     *
     * @param string|null $shipMethod The shipment method.
     *
     * @return $this
     */
    public function setShipMethod($shipMethod)
    {
        $this->container['shipMethod'] = $shipMethod;

        return $this;
    }

    /**
     * Gets scacCode
     *
     * @return string|null
     */
    public function getScacCode()
    {
        return $this->container['scacCode'];
    }

    /**
     * Sets scacCode
     *
     * @param string|null $scacCode SCAC code required for NA VOC vendors only.
     *
     * @return $this
     */
    public function setScacCode($scacCode)
    {
        $this->container['scacCode'] = $scacCode;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Carrier required for EU VOC vendors only.
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets containerSequenceNumber
     *
     * @return int|null
     */
    public function getContainerSequenceNumber()
    {
        return $this->container['containerSequenceNumber'];
    }

    /**
     * Sets containerSequenceNumber
     *
     * @param int|null $containerSequenceNumber An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
     *
     * @return $this
     */
    public function setContainerSequenceNumber($containerSequenceNumber)
    {
        $this->container['containerSequenceNumber'] = $containerSequenceNumber;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\Dimensions|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\Dimensions|null $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\Weight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\Weight|null $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets packedItems
     *
     * @return \Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\PackedItem[]
     */
    public function getPackedItems()
    {
        return $this->container['packedItems'];
    }

    /**
     * Sets packedItems
     *
     * @param \Glue\SpApi\OpenAPI\Clients\VendorDirectFulfillmentShippingV1\Model\PackedItem[] $packedItems A list of packed items.
     *
     * @return $this
     */
    public function setPackedItems($packedItems)
    {
        $this->container['packedItems'] = $packedItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


