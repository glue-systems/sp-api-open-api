<?php
/**
 * SupplySourcesApi
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException;
use Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Configuration;
use Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\HeaderSelector;
use Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ObjectSerializer;

/**
 * SupplySourcesApi Class Doc Comment
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplySourcesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveSupplySource
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList
     */
    public function archiveSupplySource($supplySourceId)
    {
        list($response) = $this->archiveSupplySourceWithHttpInfo($supplySourceId);
        return $response;
    }

    /**
     * Operation archiveSupplySourceWithHttpInfo
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveSupplySourceWithHttpInfo($supplySourceId)
    {
        $request = $this->archiveSupplySourceRequest($supplySourceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation archiveSupplySourceAsync
     *
     * 
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveSupplySourceAsync($supplySourceId)
    {
        return $this->archiveSupplySourceAsyncWithHttpInfo($supplySourceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveSupplySourceAsyncWithHttpInfo($supplySourceId)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList';
        $request = $this->archiveSupplySourceRequest($supplySourceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveSupplySource'
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archiveSupplySourceRequest($supplySourceId)
    {
        // verify the required parameter 'supplySourceId' is set
        if ($supplySourceId === null || (is_array($supplySourceId) && count($supplySourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplySourceId when calling archiveSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplySourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supplySourceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSupplySource
     *
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceRequest $createSupplySourceRequest Request to create a supply source. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceResponse|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList
     */
    public function createSupplySource($createSupplySourceRequest)
    {
        list($response) = $this->createSupplySourceWithHttpInfo($createSupplySourceRequest);
        return $response;
    }

    /**
     * Operation createSupplySourceWithHttpInfo
     *
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceRequest $createSupplySourceRequest Request to create a supply source. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceResponse|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSupplySourceWithHttpInfo($createSupplySourceRequest)
    {
        $request = $this->createSupplySourceRequest($createSupplySourceRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSupplySourceAsync
     *
     * 
     *
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceRequest $createSupplySourceRequest Request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplySourceAsync($createSupplySourceRequest)
    {
        return $this->createSupplySourceAsyncWithHttpInfo($createSupplySourceRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceRequest $createSupplySourceRequest Request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplySourceAsyncWithHttpInfo($createSupplySourceRequest)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceResponse';
        $request = $this->createSupplySourceRequest($createSupplySourceRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSupplySource'
     *
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\CreateSupplySourceRequest $createSupplySourceRequest Request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSupplySourceRequest($createSupplySourceRequest)
    {
        // verify the required parameter 'createSupplySourceRequest' is set
        if ($createSupplySourceRequest === null || (is_array($createSupplySourceRequest) && count($createSupplySourceRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createSupplySourceRequest when calling createSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($createSupplySourceRequest)) {
            $_tempBody = $createSupplySourceRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplySource
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\SupplySource|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList
     */
    public function getSupplySource($supplySourceId)
    {
        list($response) = $this->getSupplySourceWithHttpInfo($supplySourceId);
        return $response;
    }

    /**
     * Operation getSupplySourceWithHttpInfo
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\SupplySource|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplySourceWithHttpInfo($supplySourceId)
    {
        $request = $this->getSupplySourceRequest($supplySourceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\SupplySource' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\SupplySource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\SupplySource';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\SupplySource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplySourceAsync
     *
     * 
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourceAsync($supplySourceId)
    {
        return $this->getSupplySourceAsyncWithHttpInfo($supplySourceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourceAsyncWithHttpInfo($supplySourceId)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\SupplySource';
        $request = $this->getSupplySourceRequest($supplySourceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplySource'
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSupplySourceRequest($supplySourceId)
    {
        // verify the required parameter 'supplySourceId' is set
        if ($supplySourceId === null || (is_array($supplySourceId) && count($supplySourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplySourceId when calling getSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplySourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supplySourceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplySources
     *
     * @param  string $nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\GetSupplySourcesResponse|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList
     */
    public function getSupplySources($nextPageToken = null, $pageSize = 10.0)
    {
        list($response) = $this->getSupplySourcesWithHttpInfo($nextPageToken, $pageSize);
        return $response;
    }

    /**
     * Operation getSupplySourcesWithHttpInfo
     *
     * @param  string $nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\GetSupplySourcesResponse|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplySourcesWithHttpInfo($nextPageToken = null, $pageSize = 10.0)
    {
        $request = $this->getSupplySourcesRequest($nextPageToken, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\GetSupplySourcesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\GetSupplySourcesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\GetSupplySourcesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\GetSupplySourcesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplySourcesAsync
     *
     * 
     *
     * @param  string $nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourcesAsync($nextPageToken = null, $pageSize = 10.0)
    {
        return $this->getSupplySourcesAsyncWithHttpInfo($nextPageToken, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplySourcesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourcesAsyncWithHttpInfo($nextPageToken = null, $pageSize = 10.0)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\GetSupplySourcesResponse';
        $request = $this->getSupplySourcesRequest($nextPageToken, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplySources'
     *
     * @param  string $nextPageToken Pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize Number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSupplySourcesRequest($nextPageToken = null, $pageSize = 10.0)
    {

        $resourcePath = '/supplySources/2020-07-01/supplySources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($nextPageToken !== null) {
            $queryParams['nextPageToken'] = ObjectSerializer::toQueryValue($nextPageToken);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplySource
     *
     * @param  string $supplySourceId Unique identitier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceRequest $updateSupplySourceRequest updateSupplySourceRequest (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList
     */
    public function updateSupplySource($supplySourceId, $updateSupplySourceRequest = null)
    {
        list($response) = $this->updateSupplySourceWithHttpInfo($supplySourceId, $updateSupplySourceRequest);
        return $response;
    }

    /**
     * Operation updateSupplySourceWithHttpInfo
     *
     * @param  string $supplySourceId Unique identitier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceRequest $updateSupplySourceRequest (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplySourceWithHttpInfo($supplySourceId, $updateSupplySourceRequest = null)
    {
        $request = $this->updateSupplySourceRequest($supplySourceId, $updateSupplySourceRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplySourceAsync
     *
     * 
     *
     * @param  string $supplySourceId Unique identitier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceRequest $updateSupplySourceRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceAsync($supplySourceId, $updateSupplySourceRequest = null)
    {
        return $this->updateSupplySourceAsyncWithHttpInfo($supplySourceId, $updateSupplySourceRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supplySourceId Unique identitier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceRequest $updateSupplySourceRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceAsyncWithHttpInfo($supplySourceId, $updateSupplySourceRequest = null)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList';
        $request = $this->updateSupplySourceRequest($supplySourceId, $updateSupplySourceRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplySource'
     *
     * @param  string $supplySourceId Unique identitier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceRequest $updateSupplySourceRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSupplySourceRequest($supplySourceId, $updateSupplySourceRequest = null)
    {
        // verify the required parameter 'supplySourceId' is set
        if ($supplySourceId === null || (is_array($supplySourceId) && count($supplySourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplySourceId when calling updateSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplySourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supplySourceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($updateSupplySourceRequest)) {
            $_tempBody = $updateSupplySourceRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplySourceStatus
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceStatusRequest $updateSupplySourceStatusRequest updateSupplySourceStatusRequest (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList
     */
    public function updateSupplySourceStatus($supplySourceId, $updateSupplySourceStatusRequest = null)
    {
        list($response) = $this->updateSupplySourceStatusWithHttpInfo($supplySourceId, $updateSupplySourceStatusRequest);
        return $response;
    }

    /**
     * Operation updateSupplySourceStatusWithHttpInfo
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceStatusRequest $updateSupplySourceStatusRequest (optional)
     *
     * @throws \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList|\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplySourceStatusWithHttpInfo($supplySourceId, $updateSupplySourceStatusRequest = null)
    {
        $request = $this->updateSupplySourceStatusRequest($supplySourceId, $updateSupplySourceStatusRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplySourceStatusAsync
     *
     * 
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceStatusRequest $updateSupplySourceStatusRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceStatusAsync($supplySourceId, $updateSupplySourceStatusRequest = null)
    {
        return $this->updateSupplySourceStatusAsyncWithHttpInfo($supplySourceId, $updateSupplySourceStatusRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplySourceStatusAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceStatusRequest $updateSupplySourceStatusRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceStatusAsyncWithHttpInfo($supplySourceId, $updateSupplySourceStatusRequest = null)
    {
        $returnType = '\Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\ErrorList';
        $request = $this->updateSupplySourceStatusRequest($supplySourceId, $updateSupplySourceStatusRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplySourceStatus'
     *
     * @param  string $supplySourceId Unique identifier of a supply source. (required)
     * @param  \Glue\SpApi\OpenAPI\Clients\SupplySourcesV20200701\Model\UpdateSupplySourceStatusRequest $updateSupplySourceStatusRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSupplySourceStatusRequest($supplySourceId, $updateSupplySourceStatusRequest = null)
    {
        // verify the required parameter 'supplySourceId' is set
        if ($supplySourceId === null || (is_array($supplySourceId) && count($supplySourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplySourceId when calling updateSupplySourceStatus'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplySourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supplySourceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($updateSupplySourceStatusRequest)) {
            $_tempBody = $updateSupplySourceStatusRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
