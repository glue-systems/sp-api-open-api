<?php
/**
 * OrderMetricsInterval
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\SalesV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Sales
 *
 * The Selling Partner API for Sales provides APIs related to sales performance.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\SalesV1\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\SalesV1\ObjectSerializer;

/**
 * OrderMetricsInterval Class Doc Comment
 *
 * @category Class
 * @description Contains order metrics.
 * @package  Glue\SpApi\OpenAPI\Clients\SalesV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderMetricsInterval implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderMetricsInterval';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'interval' => 'string',
        'unitCount' => 'int',
        'orderItemCount' => 'int',
        'orderCount' => 'int',
        'averageUnitPrice' => '\Glue\SpApi\OpenAPI\Clients\SalesV1\Model\Money',
        'totalSales' => '\Glue\SpApi\OpenAPI\Clients\SalesV1\Model\Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'interval' => null,
        'unitCount' => null,
        'orderItemCount' => null,
        'orderCount' => null,
        'averageUnitPrice' => null,
        'totalSales' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interval' => 'interval',
        'unitCount' => 'unitCount',
        'orderItemCount' => 'orderItemCount',
        'orderCount' => 'orderCount',
        'averageUnitPrice' => 'averageUnitPrice',
        'totalSales' => 'totalSales'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interval' => 'setInterval',
        'unitCount' => 'setUnitCount',
        'orderItemCount' => 'setOrderItemCount',
        'orderCount' => 'setOrderCount',
        'averageUnitPrice' => 'setAverageUnitPrice',
        'totalSales' => 'setTotalSales'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interval' => 'getInterval',
        'unitCount' => 'getUnitCount',
        'orderItemCount' => 'getOrderItemCount',
        'orderCount' => 'getOrderCount',
        'averageUnitPrice' => 'getAverageUnitPrice',
        'totalSales' => 'getTotalSales'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['unitCount'] = isset($data['unitCount']) ? $data['unitCount'] : null;
        $this->container['orderItemCount'] = isset($data['orderItemCount']) ? $data['orderItemCount'] : null;
        $this->container['orderCount'] = isset($data['orderCount']) ? $data['orderCount'] : null;
        $this->container['averageUnitPrice'] = isset($data['averageUnitPrice']) ? $data['averageUnitPrice'] : null;
        $this->container['totalSales'] = isset($data['totalSales']) ? $data['totalSales'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        if ($this->container['unitCount'] === null) {
            $invalidProperties[] = "'unitCount' can't be null";
        }
        if ($this->container['orderItemCount'] === null) {
            $invalidProperties[] = "'orderItemCount' can't be null";
        }
        if ($this->container['orderCount'] === null) {
            $invalidProperties[] = "'orderCount' can't be null";
        }
        if ($this->container['averageUnitPrice'] === null) {
            $invalidProperties[] = "'averageUnitPrice' can't be null";
        }
        if ($this->container['totalSales'] === null) {
            $invalidProperties[] = "'totalSales' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval from the list, it might contain incomplete data if the requested interval doesn't align with the requested granularity (ex. request interval 2018-09-01T02:00:00Z--2018-09-04T19:00:00Z and granularity day will result in Sept 1st UTC day and Sept 4th UTC days having partial data).
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets unitCount
     *
     * @return int
     */
    public function getUnitCount()
    {
        return $this->container['unitCount'];
    }

    /**
     * Sets unitCount
     *
     * @param int $unitCount The number of units in orders based on the specified filters.
     *
     * @return $this
     */
    public function setUnitCount($unitCount)
    {
        $this->container['unitCount'] = $unitCount;

        return $this;
    }

    /**
     * Gets orderItemCount
     *
     * @return int
     */
    public function getOrderItemCount()
    {
        return $this->container['orderItemCount'];
    }

    /**
     * Sets orderItemCount
     *
     * @param int $orderItemCount The number of order items based on the specified filters.
     *
     * @return $this
     */
    public function setOrderItemCount($orderItemCount)
    {
        $this->container['orderItemCount'] = $orderItemCount;

        return $this;
    }

    /**
     * Gets orderCount
     *
     * @return int
     */
    public function getOrderCount()
    {
        return $this->container['orderCount'];
    }

    /**
     * Sets orderCount
     *
     * @param int $orderCount The number of orders based on the specified filters.
     *
     * @return $this
     */
    public function setOrderCount($orderCount)
    {
        $this->container['orderCount'] = $orderCount;

        return $this;
    }

    /**
     * Gets averageUnitPrice
     *
     * @return \Glue\SpApi\OpenAPI\Clients\SalesV1\Model\Money
     */
    public function getAverageUnitPrice()
    {
        return $this->container['averageUnitPrice'];
    }

    /**
     * Sets averageUnitPrice
     *
     * @param \Glue\SpApi\OpenAPI\Clients\SalesV1\Model\Money $averageUnitPrice averageUnitPrice
     *
     * @return $this
     */
    public function setAverageUnitPrice($averageUnitPrice)
    {
        $this->container['averageUnitPrice'] = $averageUnitPrice;

        return $this;
    }

    /**
     * Gets totalSales
     *
     * @return \Glue\SpApi\OpenAPI\Clients\SalesV1\Model\Money
     */
    public function getTotalSales()
    {
        return $this->container['totalSales'];
    }

    /**
     * Sets totalSales
     *
     * @param \Glue\SpApi\OpenAPI\Clients\SalesV1\Model\Money $totalSales totalSales
     *
     * @return $this
     */
    public function setTotalSales($totalSales)
    {
        $this->container['totalSales'] = $totalSales;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


