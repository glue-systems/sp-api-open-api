<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, see the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2020-12-01-use-case-guide).
 *
 * OpenAPI spec version: 2020-12-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @description An item in the Amazon catalog.
 * @package  Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asin' => 'string',
        'attributes' => '\Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemAttributes',
        'identifiers' => '\Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemIdentifiersByMarketplace[]',
        'images' => '\Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemImagesByMarketplace[]',
        'productTypes' => '\Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemProductTypeByMarketplace[]',
        'salesRanks' => '\Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemSalesRanksByMarketplace[]',
        'summaries' => '\Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemSummaryByMarketplace[]',
        'variations' => '\Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemVariationsByMarketplace[]',
        'vendorDetails' => '\Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemVendorDetailsByMarketplace[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'asin' => null,
        'attributes' => null,
        'identifiers' => null,
        'images' => null,
        'productTypes' => null,
        'salesRanks' => null,
        'summaries' => null,
        'variations' => null,
        'vendorDetails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asin' => 'asin',
        'attributes' => 'attributes',
        'identifiers' => 'identifiers',
        'images' => 'images',
        'productTypes' => 'productTypes',
        'salesRanks' => 'salesRanks',
        'summaries' => 'summaries',
        'variations' => 'variations',
        'vendorDetails' => 'vendorDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asin' => 'setAsin',
        'attributes' => 'setAttributes',
        'identifiers' => 'setIdentifiers',
        'images' => 'setImages',
        'productTypes' => 'setProductTypes',
        'salesRanks' => 'setSalesRanks',
        'summaries' => 'setSummaries',
        'variations' => 'setVariations',
        'vendorDetails' => 'setVendorDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asin' => 'getAsin',
        'attributes' => 'getAttributes',
        'identifiers' => 'getIdentifiers',
        'images' => 'getImages',
        'productTypes' => 'getProductTypes',
        'salesRanks' => 'getSalesRanks',
        'summaries' => 'getSummaries',
        'variations' => 'getVariations',
        'vendorDetails' => 'getVendorDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['identifiers'] = isset($data['identifiers']) ? $data['identifiers'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['productTypes'] = isset($data['productTypes']) ? $data['productTypes'] : null;
        $this->container['salesRanks'] = isset($data['salesRanks']) ? $data['salesRanks'] : null;
        $this->container['summaries'] = isset($data['summaries']) ? $data['summaries'] : null;
        $this->container['variations'] = isset($data['variations']) ? $data['variations'] : null;
        $this->container['vendorDetails'] = isset($data['vendorDetails']) ? $data['vendorDetails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['asin'] === null) {
            $invalidProperties[] = "'asin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asin
     *
     * @return string
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string $asin Amazon Standard Identification Number (ASIN) is the unique identifier for an item in the Amazon catalog.
     *
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemAttributes|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemAttributes|null $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemIdentifiersByMarketplace[]|null
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemIdentifiersByMarketplace[]|null $identifiers Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers.
     *
     * @return $this
     */
    public function setIdentifiers($identifiers)
    {
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemImagesByMarketplace[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemImagesByMarketplace[]|null $images Images for an item in the Amazon catalog. All image variants are provided to brand owners. Otherwise, a thumbnail of the \"MAIN\" image variant is provided.
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets productTypes
     *
     * @return \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemProductTypeByMarketplace[]|null
     */
    public function getProductTypes()
    {
        return $this->container['productTypes'];
    }

    /**
     * Sets productTypes
     *
     * @param \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemProductTypeByMarketplace[]|null $productTypes Product types associated with the Amazon catalog item.
     *
     * @return $this
     */
    public function setProductTypes($productTypes)
    {
        $this->container['productTypes'] = $productTypes;

        return $this;
    }

    /**
     * Gets salesRanks
     *
     * @return \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemSalesRanksByMarketplace[]|null
     */
    public function getSalesRanks()
    {
        return $this->container['salesRanks'];
    }

    /**
     * Sets salesRanks
     *
     * @param \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemSalesRanksByMarketplace[]|null $salesRanks Sales ranks of an Amazon catalog item.
     *
     * @return $this
     */
    public function setSalesRanks($salesRanks)
    {
        $this->container['salesRanks'] = $salesRanks;

        return $this;
    }

    /**
     * Gets summaries
     *
     * @return \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemSummaryByMarketplace[]|null
     */
    public function getSummaries()
    {
        return $this->container['summaries'];
    }

    /**
     * Sets summaries
     *
     * @param \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemSummaryByMarketplace[]|null $summaries Summary details of an Amazon catalog item.
     *
     * @return $this
     */
    public function setSummaries($summaries)
    {
        $this->container['summaries'] = $summaries;

        return $this;
    }

    /**
     * Gets variations
     *
     * @return \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemVariationsByMarketplace[]|null
     */
    public function getVariations()
    {
        return $this->container['variations'];
    }

    /**
     * Sets variations
     *
     * @param \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemVariationsByMarketplace[]|null $variations Variation details by marketplace for an Amazon catalog item (variation relationships).
     *
     * @return $this
     */
    public function setVariations($variations)
    {
        $this->container['variations'] = $variations;

        return $this;
    }

    /**
     * Gets vendorDetails
     *
     * @return \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemVendorDetailsByMarketplace[]|null
     */
    public function getVendorDetails()
    {
        return $this->container['vendorDetails'];
    }

    /**
     * Sets vendorDetails
     *
     * @param \Glue\SpApi\OpenAPI\Clients\CatalogItemsV20201201\Model\ItemVendorDetailsByMarketplace[]|null $vendorDetails Vendor details associated with an Amazon catalog item. Vendor details are available to vendors only.
     *
     * @return $this
     */
    public function setVendorDetails($vendorDetails)
    {
        $this->container['vendorDetails'] = $vendorDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


