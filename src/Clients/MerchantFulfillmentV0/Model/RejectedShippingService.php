<?php
/**
 * RejectedShippingService
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\ObjectSerializer;

/**
 * RejectedShippingService Class Doc Comment
 *
 * @category Class
 * @description Information about a rejected shipping service
 * @package  Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RejectedShippingService implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RejectedShippingService';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrierName' => 'string',
        'shippingServiceName' => 'string',
        'shippingServiceId' => 'string',
        'rejectionReasonCode' => 'string',
        'rejectionReasonMessage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'carrierName' => null,
        'shippingServiceName' => null,
        'shippingServiceId' => null,
        'rejectionReasonCode' => null,
        'rejectionReasonMessage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrierName' => 'CarrierName',
        'shippingServiceName' => 'ShippingServiceName',
        'shippingServiceId' => 'ShippingServiceId',
        'rejectionReasonCode' => 'RejectionReasonCode',
        'rejectionReasonMessage' => 'RejectionReasonMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrierName' => 'setCarrierName',
        'shippingServiceName' => 'setShippingServiceName',
        'shippingServiceId' => 'setShippingServiceId',
        'rejectionReasonCode' => 'setRejectionReasonCode',
        'rejectionReasonMessage' => 'setRejectionReasonMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrierName' => 'getCarrierName',
        'shippingServiceName' => 'getShippingServiceName',
        'shippingServiceId' => 'getShippingServiceId',
        'rejectionReasonCode' => 'getRejectionReasonCode',
        'rejectionReasonMessage' => 'getRejectionReasonMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrierName'] = isset($data['carrierName']) ? $data['carrierName'] : null;
        $this->container['shippingServiceName'] = isset($data['shippingServiceName']) ? $data['shippingServiceName'] : null;
        $this->container['shippingServiceId'] = isset($data['shippingServiceId']) ? $data['shippingServiceId'] : null;
        $this->container['rejectionReasonCode'] = isset($data['rejectionReasonCode']) ? $data['rejectionReasonCode'] : null;
        $this->container['rejectionReasonMessage'] = isset($data['rejectionReasonMessage']) ? $data['rejectionReasonMessage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrierName'] === null) {
            $invalidProperties[] = "'carrierName' can't be null";
        }
        if ($this->container['shippingServiceName'] === null) {
            $invalidProperties[] = "'shippingServiceName' can't be null";
        }
        if ($this->container['shippingServiceId'] === null) {
            $invalidProperties[] = "'shippingServiceId' can't be null";
        }
        if ($this->container['rejectionReasonCode'] === null) {
            $invalidProperties[] = "'rejectionReasonCode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrierName
     *
     * @return string
     */
    public function getCarrierName()
    {
        return $this->container['carrierName'];
    }

    /**
     * Sets carrierName
     *
     * @param string $carrierName The rejected shipping carrier name. e.g. USPS
     *
     * @return $this
     */
    public function setCarrierName($carrierName)
    {
        $this->container['carrierName'] = $carrierName;

        return $this;
    }

    /**
     * Gets shippingServiceName
     *
     * @return string
     */
    public function getShippingServiceName()
    {
        return $this->container['shippingServiceName'];
    }

    /**
     * Sets shippingServiceName
     *
     * @param string $shippingServiceName The rejected shipping service localized name. e.g. FedEx Standard Overnight
     *
     * @return $this
     */
    public function setShippingServiceName($shippingServiceName)
    {
        $this->container['shippingServiceName'] = $shippingServiceName;

        return $this;
    }

    /**
     * Gets shippingServiceId
     *
     * @return string
     */
    public function getShippingServiceId()
    {
        return $this->container['shippingServiceId'];
    }

    /**
     * Sets shippingServiceId
     *
     * @param string $shippingServiceId An Amazon-defined shipping service identifier.
     *
     * @return $this
     */
    public function setShippingServiceId($shippingServiceId)
    {
        $this->container['shippingServiceId'] = $shippingServiceId;

        return $this;
    }

    /**
     * Gets rejectionReasonCode
     *
     * @return string
     */
    public function getRejectionReasonCode()
    {
        return $this->container['rejectionReasonCode'];
    }

    /**
     * Sets rejectionReasonCode
     *
     * @param string $rejectionReasonCode A reason code meant to be consumed programatically. e.g. CARRIER_CANNOT_SHIP_TO_POBOX
     *
     * @return $this
     */
    public function setRejectionReasonCode($rejectionReasonCode)
    {
        $this->container['rejectionReasonCode'] = $rejectionReasonCode;

        return $this;
    }

    /**
     * Gets rejectionReasonMessage
     *
     * @return string|null
     */
    public function getRejectionReasonMessage()
    {
        return $this->container['rejectionReasonMessage'];
    }

    /**
     * Sets rejectionReasonMessage
     *
     * @param string|null $rejectionReasonMessage A localized human readable description of the rejected reason.
     *
     * @return $this
     */
    public function setRejectionReasonMessage($rejectionReasonMessage)
    {
        $this->container['rejectionReasonMessage'] = $rejectionReasonMessage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


