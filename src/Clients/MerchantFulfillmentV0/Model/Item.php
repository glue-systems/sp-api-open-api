<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\Model;

use \ArrayAccess;
use \Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @description An Amazon order item identifier and a quantity.
 * @package  Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orderItemId' => 'string',
        'quantity' => 'int',
        'itemWeight' => '\Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\Model\Weight',
        'itemDescription' => 'string',
        'transparencyCodeList' => 'string[]',
        'itemLevelSellerInputsList' => '\Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\Model\AdditionalSellerInputs[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'orderItemId' => null,
        'quantity' => 'int32',
        'itemWeight' => null,
        'itemDescription' => null,
        'transparencyCodeList' => null,
        'itemLevelSellerInputsList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderItemId' => 'OrderItemId',
        'quantity' => 'Quantity',
        'itemWeight' => 'ItemWeight',
        'itemDescription' => 'ItemDescription',
        'transparencyCodeList' => 'TransparencyCodeList',
        'itemLevelSellerInputsList' => 'ItemLevelSellerInputsList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderItemId' => 'setOrderItemId',
        'quantity' => 'setQuantity',
        'itemWeight' => 'setItemWeight',
        'itemDescription' => 'setItemDescription',
        'transparencyCodeList' => 'setTransparencyCodeList',
        'itemLevelSellerInputsList' => 'setItemLevelSellerInputsList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderItemId' => 'getOrderItemId',
        'quantity' => 'getQuantity',
        'itemWeight' => 'getItemWeight',
        'itemDescription' => 'getItemDescription',
        'transparencyCodeList' => 'getTransparencyCodeList',
        'itemLevelSellerInputsList' => 'getItemLevelSellerInputsList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderItemId'] = isset($data['orderItemId']) ? $data['orderItemId'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['itemWeight'] = isset($data['itemWeight']) ? $data['itemWeight'] : null;
        $this->container['itemDescription'] = isset($data['itemDescription']) ? $data['itemDescription'] : null;
        $this->container['transparencyCodeList'] = isset($data['transparencyCodeList']) ? $data['transparencyCodeList'] : null;
        $this->container['itemLevelSellerInputsList'] = isset($data['itemLevelSellerInputsList']) ? $data['itemLevelSellerInputsList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orderItemId'] === null) {
            $invalidProperties[] = "'orderItemId' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderItemId
     *
     * @return string
     */
    public function getOrderItemId()
    {
        return $this->container['orderItemId'];
    }

    /**
     * Sets orderItemId
     *
     * @param string $orderItemId An Amazon-defined identifier for an individual item in an order.
     *
     * @return $this
     */
    public function setOrderItemId($orderItemId)
    {
        $this->container['orderItemId'] = $orderItemId;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The number of items.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets itemWeight
     *
     * @return \Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\Model\Weight|null
     */
    public function getItemWeight()
    {
        return $this->container['itemWeight'];
    }

    /**
     * Sets itemWeight
     *
     * @param \Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\Model\Weight|null $itemWeight itemWeight
     *
     * @return $this
     */
    public function setItemWeight($itemWeight)
    {
        $this->container['itemWeight'] = $itemWeight;

        return $this;
    }

    /**
     * Gets itemDescription
     *
     * @return string|null
     */
    public function getItemDescription()
    {
        return $this->container['itemDescription'];
    }

    /**
     * Sets itemDescription
     *
     * @param string|null $itemDescription The description of the item.
     *
     * @return $this
     */
    public function setItemDescription($itemDescription)
    {
        $this->container['itemDescription'] = $itemDescription;

        return $this;
    }

    /**
     * Gets transparencyCodeList
     *
     * @return string[]|null
     */
    public function getTransparencyCodeList()
    {
        return $this->container['transparencyCodeList'];
    }

    /**
     * Sets transparencyCodeList
     *
     * @param string[]|null $transparencyCodeList A list of transparency codes.
     *
     * @return $this
     */
    public function setTransparencyCodeList($transparencyCodeList)
    {
        $this->container['transparencyCodeList'] = $transparencyCodeList;

        return $this;
    }

    /**
     * Gets itemLevelSellerInputsList
     *
     * @return \Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\Model\AdditionalSellerInputs[]|null
     */
    public function getItemLevelSellerInputsList()
    {
        return $this->container['itemLevelSellerInputsList'];
    }

    /**
     * Sets itemLevelSellerInputsList
     *
     * @param \Glue\SpApi\OpenAPI\Clients\MerchantFulfillmentV0\Model\AdditionalSellerInputs[]|null $itemLevelSellerInputsList A list of additional seller input pairs required to purchase shipping.
     *
     * @return $this
     */
    public function setItemLevelSellerInputsList($itemLevelSellerInputsList)
    {
        $this->container['itemLevelSellerInputsList'] = $itemLevelSellerInputsList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


